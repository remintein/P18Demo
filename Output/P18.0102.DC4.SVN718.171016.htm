<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\P18.0102.DC4.SVN718.171016.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\P18.0102.DC4.SVN718.171016.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Mon Oct 16 17:19:27 2017
<BR><P>
<H3>Maximum Stack Usage =      18440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; App2_Page4Func &rArr; Flash_Debug &rArr; MxFlash_Debug &rArr; MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC_IRQHandler</a><BR>
 <LI><a href="#[76]">Delay_NS</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">Delay_NS</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from ctrl0.o(i.BusFault_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[29]">CAN1_RX0_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[28]">CAN1_TX_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[55]">CAN2_RX0_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[56]">CAN2_RX1_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[57]">CAN2_SCE_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[54]">CAN2_TX_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[6e]">COM4_IRQReceiveByte</a> from irda_port.o(i.COM4_IRQReceiveByte) referenced from irda_port.o(i.IrDA_Configuration)
 <LI><a href="#[6f]">COM5_IRQReceiveByte</a> from irda_port.o(i.COM5_IRQReceiveByte) referenced from irda_port.o(i.IrDA_Configuration)
 <LI><a href="#[64]">CRYP_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[63]">DCMI_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[20]">DMA1_Stream0_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[21]">DMA1_Stream1_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[22]">DMA1_Stream2_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[23]">DMA1_Stream3_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[24]">DMA1_Stream4_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[25]">DMA1_Stream5_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[26]">DMA1_Stream6_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[44]">DMA1_Stream7_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream0_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream1_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream2_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[50]">DMA2_Stream3_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[51]">DMA2_Stream4_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[59]">DMA2_Stream5_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream6_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream7_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from ctrl0.o(i.DebugMon_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[52]">ETH_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[53]">ETH_WKUP_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from ctrl0.o(i.EXTI0_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from ctrl0.o(i.EXTI15_10_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from ctrl0.o(i.EXTI1_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from ctrl0.o(i.EXTI3_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from ctrl0.o(i.EXTI9_5_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[66]">FPU_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[45]">FSMC_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[6d]">GPS_QueryInit</a> from gps.o(i.GPS_QueryInit) referenced from gps.o(i.GPS_Init)
 <LI><a href="#[65]">HASH_RNG_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from ctrl0.o(i.HardFault_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from ctrl0.o(i.MemManage_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from ctrl0.o(i.NMI_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[58]">OTG_FS_IRQHandler</a> from ctrl0.o(i.OTG_FS_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[3f]">OTG_FS_WKUP_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_IN_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_OUT_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[62]">OTG_HS_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[61]">OTG_HS_WKUP_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from ctrl0.o(i.PendSV_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from ctrl0.o(i.RCC_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from ctrl0.o(i.RTC_Alarm_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[18]">RTC_WKUP_IRQHandler</a> from ctrl0.o(i.RTC_WKUP_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[46]">SDIO_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[70]">SPI_USART_IRQHandler</a> from spi_usart.o(i.SPI_USART_IRQHandler) referenced from spi_usart.o(i.SPI_USART_HardInit)
 <LI><a href="#[11]">SVC_Handler</a> from ctrl0.o(i.SVC_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from ctrl0.o(i.SysTick_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from stm32f4xxappinit.o(.text)
 <LI><a href="#[17]">TAMP_STAMP_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[71]">TCP_Connections</a> from tcp.o(i.TCP_Connections) referenced from tcp.o(i.TCP_Init)
 <LI><a href="#[2d]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_TIM10_IRQHandler</a> from ctrl0.o(i.TIM1_UP_TIM10_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from ctrl0.o(i.TIM3_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from ctrl0.o(i.TIM4_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[47]">TIM5_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[4b]">TIM6_DAC_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[40]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[43]">TIM8_CC_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[42]">TIM8_TRG_COM_TIM14_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[41]">TIM8_UP_TIM13_IRQHandler</a> from ctrl0.o(i.TIM8_UP_TIM13_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from ctrl0.o(i.UART4_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[4a]">UART5_IRQHandler</a> from ctrl0.o(i.UART5_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from ctrl0.o(i.USART1_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from ctrl0.o(i.USART3_IRQHandler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[5c]">USART6_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[1]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[0]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[9]">USBD_DevConnected</a> from usbd_core.o(i.USBD_DevConnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[a]">USBD_DevDisconnected</a> from usbd_core.o(i.USBD_DevDisconnected) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[7]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[8]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[4]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[10]">UsageFault_Handler</a> from ctrl0.o(i.UsageFault_Handler) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from stm32f4xxappinit.o(.text) referenced from stm32f4xxappinit.o(RESET)
 <LI><a href="#[6c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f4xxappinit.o(.text)
 <LI><a href="#[69]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[68]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[73]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[73]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[72]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6a]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[67]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(.text)
</UL>
<P><STRONG><a name="[36a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[36b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[36c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[36d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[36e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[36f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[370]"></a>__asm___10_MiscFunc_c_41219321____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, miscfunc.o(.emb_text), UNUSED)

<P><STRONG><a name="[371]"></a>__asm___10_MiscFunc_c_41219321____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, miscfunc.o(.emb_text), UNUSED)

<P><STRONG><a name="[372]"></a>Enable_FAULT_INTERRUPT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, miscfunc.o(.emb_text), UNUSED)

<P><STRONG><a name="[373]"></a>Disable_FAULT_INITERRUPT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, miscfunc.o(.emb_text), UNUSED)

<P><STRONG><a name="[374]"></a>__RBIT32W</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, miscfunc.o(.emb_text), UNUSED)

<P><STRONG><a name="[76]"></a>Delay_NS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, miscfunc.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_NS
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_NS
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_NS
</UL>

<P><STRONG><a name="[82]"></a>RC523_Right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rc523_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiInit
</UL>

<P><STRONG><a name="[77]"></a>RC523_vSpiCsH</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC523_vSpiCsH
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiCsInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[79]"></a>RC523_vSpiCsL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC523_vSpiCsL
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>

<P><STRONG><a name="[7b]"></a>RC523_vRstSetH</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC523_vRstSetH
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523RstInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[7c]"></a>RC523_vRstSetL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC523_vRstSetL
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[7d]"></a>PICC_vRC523SpiCsInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PICC_vRC523SpiCsInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsH
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[80]"></a>PICC_vRC523RstInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PICC_vRC523RstInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vRstSetH
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[81]"></a>PICC_vRC523SpiInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PICC_vRC523SpiInit &rArr; SYSTEM_SPIInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Right
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[84]"></a>PICC_vRC523SpiReadWrite</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rc523_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>

<P><STRONG><a name="[86]"></a>Mifarel_Version</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[88]"></a>MIFARE1_Request</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MIFARE1_Request &rArr; PICC_u8PiccAbsentPolling &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccAbsentPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[8c]"></a>MIFARE1_Anticoll</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MIFARE1_Anticoll &rArr; PICC_u8GetPiccUid
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccUid
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccType
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[8f]"></a>MIFARE1_Select</STRONG> (Thumb, 30 bytes, Stack size 120 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MIFARE1_Select &rArr; PICC_u8PowerON &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[91]"></a>MIFARE1_Select2</STRONG> (Thumb, 96 bytes, Stack size 136 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccUid
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccSAK
</UL>

<P><STRONG><a name="[93]"></a>MIFARE1_DirectAuthent</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = MIFARE1_DirectAuthent &rArr; PICC_u8PiccPresentPolling &rArr; PICC_u8PresentPolling &rArr; PICC_u8ReqResponse &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccPresentPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Authent
</UL>

<P><STRONG><a name="[25a]"></a>MIFARE1_LoadKey</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MIFARE1_LoadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[96]"></a>MIFARE1_Authent</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MIFARE1_Authent &rArr; MIFARE1_DirectAuthent &rArr; PICC_u8PiccPresentPolling &rArr; PICC_u8PresentPolling &rArr; PICC_u8ReqResponse &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DirectAuthent
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[97]"></a>MIFARE1_ReadPicc</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MIFARE1_ReadPicc &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_RestoreWallet_B
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DecWallet_B
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadWallet_B
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_CheckWallet
</UL>

<P><STRONG><a name="[98]"></a>MIFARE1_WritePicc</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[99]"></a>MIFARE1_CheckWallet</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = MIFARE1_CheckWallet &rArr; MIFARE1_ReadPicc &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPicc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadWallet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_IncWallet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DecWallet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_RestoreWallet
</UL>

<P><STRONG><a name="[9a]"></a>MIFARE1_InitWallet</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MIFARE1_InitWallet &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[9b]"></a>MIFARE1_ReadWallet</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = MIFARE1_ReadWallet &rArr; MIFARE1_CheckWallet &rArr; MIFARE1_ReadPicc &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_CheckWallet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[9c]"></a>MIFARE1_ReadWallet_B</STRONG> (Thumb, 290 bytes, Stack size 88 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPicc
</UL>

<P><STRONG><a name="[9d]"></a>MIFARE1_IncWallet</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = MIFARE1_IncWallet &rArr; MIFARE1_CheckWallet &rArr; MIFARE1_ReadPicc &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_CheckWallet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[9e]"></a>MIFARE1_DecWallet</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, mifare1_operate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = MIFARE1_DecWallet &rArr; MIFARE1_CheckWallet &rArr; MIFARE1_ReadPicc &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_CheckWallet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[9f]"></a>MIFARE1_DecWallet_B</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPicc
</UL>

<P><STRONG><a name="[a0]"></a>MIFARE1_RestoreWallet</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_CheckWallet
</UL>

<P><STRONG><a name="[a1]"></a>MIFARE1_RestoreWallet_B</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPicc
</UL>

<P><STRONG><a name="[a2]"></a>MIFARE1_ReadPiccEx</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccType
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a3]"></a>MIFARE1_WritePiccEx</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, mifare1_operate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccType
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[f2]"></a>CPU_Right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[a4]"></a>CPU_TotalDelayUsInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPU_TotalDelayUsInit &rArr; TIME3_DelayUsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[a7]"></a>CPU_TotalDelayUsCheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CPU_TotalDelayUsCheck &rArr; TIME3_DelayCheck &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[a9]"></a>CPU_DelayUsInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsInit
</UL>

<P><STRONG><a name="[ab]"></a>CPU_DelayUsEnable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsEnable
</UL>

<P><STRONG><a name="[ad]"></a>CPU_DelayUsDisable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsDisable
</UL>

<P><STRONG><a name="[af]"></a>CPU_DelayUsCheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayCheck
</UL>

<P><STRONG><a name="[b1]"></a>CPU_DelayUs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CPU_DelayUs &rArr; TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotActive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdActive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerOn
</UL>

<P><STRONG><a name="[b3]"></a>CPU_DelayMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CPU_DelayMs &rArr; TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[b4]"></a>CPU_DelayOneETU</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
</UL>

<P><STRONG><a name="[b5]"></a>CPU_DelayNETU</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CPU_DelayNETU &rArr; TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1SendBlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1ReceiveBlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendLastByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
</UL>

<P><STRONG><a name="[b6]"></a>CPU_DelayHalfETU</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
</UL>

<P><STRONG><a name="[cb]"></a>CPU_ReversalByte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendLastByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
</UL>

<P><STRONG><a name="[b7]"></a>cpu_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cpu_init &rArr; SC7816_Init &rArr; SC7816_GpioInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[b9]"></a>cpu_baud_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_baud_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_BaudSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ResetParse
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetBaudFromFD
</UL>

<P><STRONG><a name="[bb]"></a>CPU_SetBaudFromFD</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPU_SetBaudFromFD &rArr; cpu_baud_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_baud_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[375]"></a>CPU_SAMIOOutput</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>CPU_SAMIOInput</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>CPU_SAMIOSelect</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_SAMIOSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_PortSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[be]"></a>CPU_SetRst</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPU_SetRst
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotActive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdActive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_TestTimer
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_WorkingTimer
</UL>

<P><STRONG><a name="[bf]"></a>CPU_PowerOn</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CPU_PowerOn &rArr; CPU_DelayUs &rArr; TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdActive
</UL>

<P><STRONG><a name="[c8]"></a>CPU_PowerOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
</UL>

<P><STRONG><a name="[c7]"></a>CPU_ClockOff</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
</UL>

<P><STRONG><a name="[d8]"></a>CPU_ClockOn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdActive
</UL>

<P><STRONG><a name="[ee]"></a>CPU_Detect</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
</UL>

<P><STRONG><a name="[c0]"></a>CPU_ParaInit</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_ParaInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[c2]"></a>CPU_ReceiveAtrOver</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CPU_ReceiveAtrOver &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SetStopBit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[c5]"></a>CPU_ReceiveFirstByte</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CPU_ReceiveFirstByte &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SetStopBit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[c6]"></a>CPU_PowerDown</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CPU_PowerDown &rArr; CPU_SetRst
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ClockOff
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerOff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_process_byte_manage
</UL>

<P><STRONG><a name="[c9]"></a>CPU_ReceiveByte</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SetStopBit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByteHRate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReversalByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1ReceiveBlock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendPTS
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdNoData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdReturn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetSW1SW2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[cc]"></a>CPU_SendByte</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CPU_SendByte &rArr; SC7816_SendByteHRate &rArr; write_T0_Byte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SetStopBit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendByteHRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendByte
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReversalByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendRBlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1SendBlock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendPTS
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdNoData
</UL>

<P><STRONG><a name="[cf]"></a>CPU_SendLastByte</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CPU_SendLastByte &rArr; SC7816_SendLastByte &rArr; write_T0_LastByte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SetStopBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendLastByte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendByteHRate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReversalByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
</UL>

<P><STRONG><a name="[d1]"></a>CPU_GetAtr</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CPU_GetAtr &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ParitySelect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ParityEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ParityDisable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveFirstByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveAtrOver
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TotalDelayUsCheck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TotalDelayUsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
</UL>

<P><STRONG><a name="[d6]"></a>CPU_CalculateETUFromFD</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendPTS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ResetParse
</UL>

<P><STRONG><a name="[d5]"></a>CPU_ResetParse</STRONG> (Thumb, 1284 bytes, Stack size 88 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CPU_ResetParse &rArr; cpu_baud_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ParitySelect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CalculateETUFromFD
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_baud_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
</UL>

<P><STRONG><a name="[d7]"></a>CPU_ColdActive</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CPU_ColdActive &rArr; CPU_PowerOn &rArr; CPU_DelayUs &rArr; TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ClockOn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[d9]"></a>CPU_HotActive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CPU_HotActive &rArr; CPU_DelayUs &rArr; TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
</UL>

<P><STRONG><a name="[da]"></a>CPU_GetSW1SW2</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CPU_GetSW1SW2 &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdNoData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdReturn
</UL>

<P><STRONG><a name="[db]"></a>CPU_CmdReturn</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CPU_CmdReturn &rArr; CPU_GetSW1SW2 &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetSW1SW2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
</UL>

<P><STRONG><a name="[dc]"></a>CPU_CmdNoData</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CPU_CmdNoData &rArr; CPU_GetSW1SW2 &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetSW1SW2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[de]"></a>CPU_CmdData</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CPU_CmdData &rArr; CPU_CmdReturn &rArr; CPU_GetSW1SW2 &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdReturn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetSW1SW2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendLastByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[df]"></a>CPU_CmdSendPTS</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CPU_CmdSendPTS &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CalculateETUFromFD
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[e2]"></a>CPU_GetLRC</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_GetLRC
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1SendBlock
</UL>

<P><STRONG><a name="[e0]"></a>CPU_CmdT1ReceiveBlock</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
</UL>

<P><STRONG><a name="[e1]"></a>CPU_CmdT1SendBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CPU_CmdT1SendBlock &rArr; CPU_SendByte &rArr; SC7816_SendByteHRate &rArr; write_T0_Byte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetLRC
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
</UL>

<P><STRONG><a name="[e3]"></a>CPU_CmdChangeIFSD</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CPU_CmdChangeIFSD &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1SendBlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1ReceiveBlock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetLRC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[e7]"></a>CPU_UpdateCurrentT1DataToCard</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
</UL>

<P><STRONG><a name="[377]"></a>CPU_UpdateCardToT1Data</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>CPU_CmdSendRBlock</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CPU_CmdSendRBlock &rArr; CPU_SendByte &rArr; SC7816_SendByteHRate &rArr; write_T0_Byte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
</UL>

<P><STRONG><a name="[e5]"></a>CPU_T1Command</STRONG> (Thumb, 1626 bytes, Stack size 368 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = CPU_T1Command &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendRBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_UpdateCurrentT1DataToCard
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1SendBlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdT1ReceiveBlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[ea]"></a>CPU_CommandExecute</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = CPU_CommandExecute &rArr; CPU_T1Command &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendPTS
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdNoData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SAMIOSelect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetBaudFromFD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_SetCard
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Command
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_process_byte_manage
</UL>

<P><STRONG><a name="[ec]"></a>CPU_Command</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = CPU_Command &rArr; cpu_process_byte_manage &rArr; CPU_CommandExecute &rArr; CPU_T1Command &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Detect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayMs
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_process_byte_manage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
</UL>

<P><STRONG><a name="[ef]"></a>CPU_HotReset</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CPU_HotReset &rArr; CPU_GetAtr &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Detect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotActive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ResetParse
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[f0]"></a>CPU_SetCardMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CPU_SetCardMode &rArr; cpu_SetCard &rArr; ConfigGpio7816Para
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_SetCard
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
</UL>

<P><STRONG><a name="[f1]"></a>CPU_ColdReset</STRONG> (Thumb, 742 bytes, Stack size 32 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CPU_ColdReset &rArr; CPU_HotReset &rArr; CPU_GetAtr &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Detect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGpio7816Para
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetCardMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdActive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ResetParse
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CalculateETUFromFD
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ParaInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SAMIOSelect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_baud_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayMs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Right
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
</UL>

<P><STRONG><a name="[f3]"></a>Contact_LibararyVersion</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[f6]"></a>CPU_SupplyPowerCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PortInit
</UL>

<P><STRONG><a name="[f4]"></a>CPU_PortInit</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, cpu_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CPU_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SupplyPowerCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_Debug
</UL>

<P><STRONG><a name="[f7]"></a>bluetooth_Version</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[378]"></a>TCP_ReadData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluetooth.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>BT_UartInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BT_UartInit &rArr; SPI_USART_Init &rArr; Trigger_Config &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power
</UL>

<P><STRONG><a name="[fa]"></a>BT_Power</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BT_Power &rArr; BT_UartInit &rArr; SPI_USART_Init &rArr; Trigger_Config &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power_Port
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[fc]"></a>BT_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BT_Reset &rArr; SPI_USART_Init &rArr; Trigger_Config &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UartBaut
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetMode
</UL>

<P><STRONG><a name="[fe]"></a>BT_SendNBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
</UL>

<P><STRONG><a name="[100]"></a>BT_RecvData</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BT_RecvData &rArr; SPI_USART_ReceiveData &rArr; Read_RFCNT &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
</UL>

<P><STRONG><a name="[103]"></a>BT_ReadNbyteE2PROM</STRONG> (Thumb, 212 bytes, Stack size 2184 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4384<LI>Call Chain = BT_ReadNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RecvData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SendNBytes
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UartBaut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_PinCode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ModuleName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_BtAddr
</UL>

<P><STRONG><a name="[105]"></a>BT_WriteNbyteE2PROM</STRONG> (Thumb, 230 bytes, Stack size 2176 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = BT_WriteNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RecvData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SendNBytes
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UartBaut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_PinCode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ModuleName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_BtAddr
</UL>

<P><STRONG><a name="[106]"></a>BT_SetMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BT_SetMode &rArr; BT_Reset &rArr; SPI_USART_Init &rArr; Trigger_Config &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[107]"></a>BT_UartBaut</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = BT_UartBaut &rArr; BT_ReadNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[108]"></a>BT_BtAddr</STRONG> (Thumb, 116 bytes, Stack size 120 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = BT_BtAddr &rArr; BT_ReadNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[109]"></a>BT_PinCode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = BT_PinCode &rArr; BT_ReadNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[10a]"></a>BT_ModuleName</STRONG> (Thumb, 190 bytes, Stack size 120 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = BT_ModuleName &rArr; BT_ReadNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[10b]"></a>BT_SendData</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = BT_SendData &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[10c]"></a>BT_RecData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BT_RecData &rArr; SPI_USART_ReceiveData &rArr; Read_RFCNT &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[1a6]"></a>Uart_BTDebug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
</UL>

<P><STRONG><a name="[10d]"></a>BT_Clear_BUFF</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_RX_BUF
</UL>

<P><STRONG><a name="[f5]"></a>TIME2_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIME2_Init &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PortInit
</UL>

<P><STRONG><a name="[b2]"></a>TIME2_DelayUs</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIME2_DelayUs &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayHalfETU
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayNETU
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayOneETU
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayMs
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUs
</UL>

<P><STRONG><a name="[118]"></a>TIME2_DelayMs</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelaySecond
</UL>

<P><STRONG><a name="[119]"></a>TIME2_DelaySecond</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[aa]"></a>TIME2_DelayUsInit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIME2_DelayUsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUsInit
</UL>

<P><STRONG><a name="[ac]"></a>TIME2_DelayUsEnable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUsEnable
</UL>

<P><STRONG><a name="[ae]"></a>TIME2_DelayUsDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUsDisable
</UL>

<P><STRONG><a name="[b0]"></a>TIME2_DelayCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIME2_DelayCheck &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_DelayUsCheck
</UL>

<P><STRONG><a name="[11a]"></a>TIME3_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>TIME3_DelayUs</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>

<P><STRONG><a name="[11c]"></a>TIME3_DelayMs</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelaySecond
</UL>

<P><STRONG><a name="[11d]"></a>TIME3_DelaySecond</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
</UL>

<P><STRONG><a name="[a5]"></a>TIME3_DelayUsInit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIME3_DelayUsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TotalDelayUsInit
</UL>

<P><STRONG><a name="[a6]"></a>TIME3_DelayUsEnable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIME3_DelayUsEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TotalDelayUsInit
</UL>

<P><STRONG><a name="[11e]"></a>TIME3_DelayUsDisable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[a8]"></a>TIME3_DelayCheck</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIME3_DelayCheck &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TotalDelayUsCheck
</UL>

<P><STRONG><a name="[bd]"></a>SC7816_PortSelect</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, sc7816_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SAMIOSelect
</UL>

<P><STRONG><a name="[e9]"></a>ConfigGpio7816Para</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConfigGpio7816Para
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEtuClk
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_SetCard
</UL>

<P><STRONG><a name="[ed]"></a>SC7816_WorkTimerInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SC7816_WorkTimerInit &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_WorkingTimer
</UL>

<P><STRONG><a name="[379]"></a>WorkingTimerDelayUs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>test_WorkingTimer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_one_etu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitGpio7816Para
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[125]"></a>SC7816_GpioInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SC7816_GpioInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_out
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitGpio7816Para
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
</UL>

<P><STRONG><a name="[128]"></a>SC7816_ClkInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SC7816_ClkInit &rArr; USART_ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
</UL>

<P><STRONG><a name="[d4]"></a>SC7816_ParitySelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ResetParse
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[37a]"></a>SC7816_TransmitEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>SC7816_ReceiveEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>SC7816_ReceiveDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>SC7816_SetStopBit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendLastByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveFirstByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveAtrOver
</UL>

<P><STRONG><a name="[d3]"></a>SC7816_ParityEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[d2]"></a>SC7816_ParityDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetAtr
</UL>

<P><STRONG><a name="[ba]"></a>SC7816_BaudSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_baud_init
</UL>

<P><STRONG><a name="[37d]"></a>SC7816_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>SC7816_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SC7816_Init &rArr; SC7816_GpioInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ClkInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_enable_in_out
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[134]"></a>set_normalbyte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_Byte
</UL>

<P><STRONG><a name="[136]"></a>set_lastbyte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_LastByte
</UL>

<P><STRONG><a name="[12f]"></a>ICCGPIO_OutData</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_half_etu
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_in
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_enable_in_out
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_out
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_one_etu
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_LastByte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_Byte
</UL>

<P><STRONG><a name="[132]"></a>ICCGPIO_InData</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_half_etu
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_in
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_enable_in_out
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_out
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_one_etu
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
</UL>

<P><STRONG><a name="[133]"></a>write_T0_Byte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_T0_Byte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_normalbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendByteHRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendByte
</UL>

<P><STRONG><a name="[135]"></a>write_T0_LastByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_T0_LastByte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lastbyte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_setRx
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_SendLastByte
</UL>

<P><STRONG><a name="[ce]"></a>SC7816_SendByte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SC7816_SendByte &rArr; write_T0_Byte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
</UL>

<P><STRONG><a name="[cd]"></a>SC7816_SendByteHRate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SC7816_SendByteHRate &rArr; write_T0_Byte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendLastByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendByte
</UL>

<P><STRONG><a name="[d0]"></a>SC7816_SendLastByte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SC7816_SendLastByte &rArr; write_T0_LastByte &rArr; ICCGPIO_OutData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_LastByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SendLastByte
</UL>

<P><STRONG><a name="[c4]"></a>SC7816_ReceiveByte</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayCheck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayCheck
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_InData
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByteHRate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveFirstByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveAtrOver
</UL>

<P><STRONG><a name="[ca]"></a>SC7816_ReceiveByteHRate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ReceiveByte
</UL>

<P><STRONG><a name="[137]"></a>SC7816_TestTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio7816.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_one_etu
</UL>

<P><STRONG><a name="[138]"></a>BT_StatePinConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bluetooth_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>

<P><STRONG><a name="[fb]"></a>BT_Power_Port</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bluetooth_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BT_Power_Port &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_GetData_DMA
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetCurrData_DMA
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccUid
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_SendCommand
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_ReadResponse
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reconnection
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QueryIPAdd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_NetworkPara_Set
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart6_GetData_DMA
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_UserWrite
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_UserRead
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorRead
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DMA_ReceiveDatas
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_Version
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_LibararyVersion
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_process_byte_manage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_WritePiccEx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPiccEx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_WritePicc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPicc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifarel_Version
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1616
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GetDataCommand
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RX_BUF
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WaitKeyEvent
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_process_byte_manage
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
</UL>

<P><STRONG><a name="[37e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[37f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clrscr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_NetworkPara_Set
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Eliminate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vResetPiccParam
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_y
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ModuleName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_BtAddr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_SendCommand
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_ReadResponse
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Cycle
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitParaTableInfo
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_HotReset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ParaInit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
</UL>

<P><STRONG><a name="[381]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[202]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Production_Evaluation
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[206]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QueryIPAdd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_NetworkPara_Set
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[104]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ModuleName
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_WriteNbyteE2PROM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ReadNbyteE2PROM
</UL>

<P><STRONG><a name="[203]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeModify
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateModify
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[141]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeModify
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateModify
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_dddmm_dd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_dddmm_dd
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_dddmm_dd
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_dddmm_dd
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_dddmm_dd
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[382]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[383]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[384]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[385]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[143]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[386]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[387]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[147]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[364]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f4xxappinit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[388]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[15d]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[68]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[389]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>ABC_memcmp</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, flash_debug.o(i.ABC_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ABC_memcmp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
</UL>

<P><STRONG><a name="[161]"></a>AUTO_Debug</STRONG> (Thumb, 1886 bytes, Stack size 408 bytes, auto_debug.o(i.AUTO_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = AUTO_Debug &rArr; PICC_u8PowerON &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSysDateTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ModeSelect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Display
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SetCallBackFlag
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Interactive_Mode_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connection_Mode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccUid
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccType
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetTCPDebug
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QuerySignal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QueryIPAdd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QueryConnectionSchedule
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_NetworkPara_Set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connection_Time_MAX
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
</UL>

<P><STRONG><a name="[177]"></a>App2_FirstMenu</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i.App2_FirstMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App2_FirstMenu &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>App2_Page0Func</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.App2_Page0Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = App2_Page0Func &rArr; AUTO_Debug &rArr; PICC_u8PowerON &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Debug
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>App2_Page0Menu</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.App2_Page0Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App2_Page0Menu &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
</UL>

<P><STRONG><a name="[17f]"></a>App2_Page1Func</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.App2_Page1Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 3208<LI>Call Chain = App2_Page1Func &rArr; Sound_Debug &rArr; TTSPlay &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransMode_Debug
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>App2_Page1Menu</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.App2_Page1Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App2_Page1Menu &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
</UL>

<P><STRONG><a name="[185]"></a>App2_Page2Func</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.App2_Page2Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8848<LI>Call Chain = App2_Page2Func &rArr; TCP_Debug &rArr; TCP_RecvNETData &rArr; TCP_RecvData1 &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>App2_Page2Menu</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i.App2_Page2Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App2_Page2Menu &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
</UL>

<P><STRONG><a name="[18b]"></a>App2_Page3Func</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.App2_Page3Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 18440<LI>Call Chain = App2_Page3Func &rArr; Flash_Debug &rArr; MxFlash_Debug &rArr; MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>App2_Page3Menu</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.App2_Page3Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App2_Page3Menu &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
</UL>

<P><STRONG><a name="[191]"></a>App2_Page4Func</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.App2_Page4Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 18440<LI>Call Chain = App2_Page4Func &rArr; Flash_Debug &rArr; MxFlash_Debug &rArr; MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Debug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>App2_Page4Menu</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(i.App2_Page4Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App2_Page4Menu &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
</UL>

<P><STRONG><a name="[195]"></a>App3_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.App3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = App3_Init &rArr; SYS_Init &rArr; SYS_GetSYSPWRPara &rArr; SYS_GetFiledMask &rArr; SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_SetTTSDebug
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SetCallBackFlag
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitSysKeyborad
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CheckKeyBoard
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>BEEP_Cycle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, beep.o(i.BEEP_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BEEP_Cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>BEEP_Debug</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, beep_debug.o(i.BEEP_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BEEP_Debug &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
</UL>

<P><STRONG><a name="[1a3]"></a>BEEP_PortInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, beep.o(i.BEEP_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEEP_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_BeepCtrl
</UL>

<P><STRONG><a name="[1a0]"></a>BEEP_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beep.o(i.BEEP_Start))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_BeepCtrl
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Cycle
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Process
</UL>

<P><STRONG><a name="[1a1]"></a>BEEP_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beep.o(i.BEEP_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_BeepCtrl
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Cycle
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Process
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>BSP_u8ConfigTypeC212</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, felica.o(i.BSP_u8ConfigTypeC212))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_u8ConfigTypeC212 &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>

<P><STRONG><a name="[1a5]"></a>BSP_u8ConfigTypeC424</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, felica.o(i.BSP_u8ConfigTypeC424))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_u8ConfigTypeC424 &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>

<P><STRONG><a name="[189]"></a>BT_Debug</STRONG> (Thumb, 1544 bytes, Stack size 232 bytes, bt_debug.o(i.BT_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 4736<LI>Call Chain = BT_Debug &rArr; BT_ModuleName &rArr; BT_ReadNbyteE2PROM &rArr; BT_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_BTDebug
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UartBaut
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetMode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SendData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RecData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_PinCode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_ModuleName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_BtAddr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
</UL>

<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ctrl0.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = BusFault_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>COM1_SendNBytes</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, com.o(i.COM1_SendNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = COM1_SendNBytes &rArr; SYS_PortSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Menu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Menu
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Menu
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Menu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Menu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_FirstMenu
</UL>

<P><STRONG><a name="[312]"></a>COM1_SetCOM1CALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.COM1_SetCOM1CALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetCOMReceiveCallBack
</UL>

<P><STRONG><a name="[1aa]"></a>COM3_ReceiveData</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, transmode_debug.o(i.COM3_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = COM3_ReceiveData &rArr; Uart3_GetData_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_GetData_DMA
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
</UL>

<P><STRONG><a name="[313]"></a>COM3_SetCOM3CALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.COM3_SetCOM3CALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetCOMReceiveCallBack
</UL>

<P><STRONG><a name="[1ac]"></a>COM4_AuxioInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, appif.o(i.COM4_AuxioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = COM4_AuxioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[1b4]"></a>COM4_AuxioSelect</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, appif.o(i.COM4_AuxioSelect))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
</UL>

<P><STRONG><a name="[211]"></a>COM4_ClearStore</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, com.o(i.COM4_ClearStore))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
</UL>

<P><STRONG><a name="[6e]"></a>COM4_IRQReceiveByte</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, irda_port.o(i.COM4_IRQReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM4_IRQReceiveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irda_port.o(i.IrDA_Configuration)
</UL>
<P><STRONG><a name="[1ad]"></a>COM4_SendByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, com.o(i.COM4_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COM4_SendByte &rArr; SYS_PortSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
</UL>

<P><STRONG><a name="[314]"></a>COM4_SetCOM4CALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.COM4_SetCOM4CALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetCOMReceiveCallBack
</UL>

<P><STRONG><a name="[1ae]"></a>COM5_AuxioInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, appif.o(i.COM5_AuxioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = COM5_AuxioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[208]"></a>COM5_AuxioSelect</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, appif.o(i.COM5_AuxioSelect))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
</UL>

<P><STRONG><a name="[212]"></a>COM5_ClearStore</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, com.o(i.COM5_ClearStore))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
</UL>

<P><STRONG><a name="[6f]"></a>COM5_IRQReceiveByte</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, irda_port.o(i.COM5_IRQReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM5_IRQReceiveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irda_port.o(i.IrDA_Configuration)
</UL>
<P><STRONG><a name="[1af]"></a>COM5_SendByte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, com.o(i.COM5_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COM5_SendByte &rArr; SYS_PortSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
</UL>

<P><STRONG><a name="[315]"></a>COM5_SetCOM5CALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.COM5_SetCOM5CALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetCOMReceiveCallBack
</UL>

<P><STRONG><a name="[1b0]"></a>COM6_AuxioInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, appif.o(i.COM6_AuxioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = COM6_AuxioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2a5]"></a>COM6_AuxioSelect</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, appif.o(i.COM6_AuxioSelect))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
</UL>

<P><STRONG><a name="[1b1]"></a>COM_Debug</STRONG> (Thumb, 294 bytes, Stack size 512 bytes, transmode_debug.o(i.COM_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = COM_Debug &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM3_ReceiveData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransMode_Debug
</UL>

<P><STRONG><a name="[1b2]"></a>COM_SelectTCP</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_port.o(i.COM_SelectTCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = COM_SelectTCP &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reconnection
</UL>

<P><STRONG><a name="[1b5]"></a>COM_Select_24g</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, _24g_port.o(i.COM_Select_24g))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = COM_Select_24g &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24g_Init
</UL>

<P><STRONG><a name="[2aa]"></a>Calc_WeekDay</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rtc.o(i.Calc_WeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Calc_WeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSysDateTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_GetTime
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
</UL>

<P><STRONG><a name="[18e]"></a>CatactlessCPU_Debug</STRONG> (Thumb, 1546 bytes, Stack size 1136 bytes, catactlesscard_debug.o(i.CatactlessCPU_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 3288<LI>Call Chain = CatactlessCPU_Debug &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_USBDisconnection
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldOff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccUid
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccType
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
</UL>

<P><STRONG><a name="[10e]"></a>Clear_RX_BUF</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, spi_usart.o(i.Clear_RX_BUF), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Clear_BUFF
</UL>

<P><STRONG><a name="[18d]"></a>Contact_Debug</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, contact_debug.o(i.Contact_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = Contact_Debug &rArr; SAM_Menu &rArr; CPU_Command &rArr; cpu_process_byte_manage &rArr; CPU_CommandExecute &rArr; CPU_T1Command &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PortInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
</UL>

<P><STRONG><a name="[1bc]"></a>DCD_DevDisconnect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_DevDisconnect &rArr; USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect
</UL>

<P><STRONG><a name="[1be]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1c0]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[1c2]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[34a]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[1c5]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1c7]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1dc]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[1d8]"></a>DMA_Configuration</STRONG> (Thumb, 326 bytes, Stack size 96 bytes, uart_dma.o(i.DMA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>

<P><STRONG><a name="[1d9]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>

<P><STRONG><a name="[333]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_GetData_DMA
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetCurrData_DMA
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus_DMA
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart6_GetData_DMA
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DMA_ReceiveDatas
</UL>

<P><STRONG><a name="[1da]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctrl0.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = DebugMon_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ctrl0.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; TTSPower
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ctrl0.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI15_10_IRQHandler &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctrl0.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EXTI1_IRQHandler &rArr; POWER_GetIntStatus &rArr; POWER_GetChargingState &rArr; POWER_I2CReadPage &rArr; POWER_I2CReadOneByte &rArr; POWER_I2CSendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_BeepCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WakeupCPU
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GetIntStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ctrl0.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI3_IRQHandler &rArr; SYS_Beep &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctrl0.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI9_5_IRQHandler &rArr; SYS_Beep &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_StatePinConfig
</UL>

<P><STRONG><a name="[1df]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_StatePinConfig
</UL>

<P><STRONG><a name="[2f3]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[2f2]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_DataCacheCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[1e3]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[1e6]"></a>FLASH_GetStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2f5]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[1e5]"></a>FLASH_ProgramWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[2f1]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[1e4]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[1f5]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[1f4]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[1ec]"></a>Fill_Buffer_8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_debug.o(i.Fill_Buffer_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fill_Buffer_8
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
</UL>

<P><STRONG><a name="[1ef]"></a>Flash_BusyState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, flash.o(i.Flash_BusyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_BusyState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_OneWord
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
</UL>

<P><STRONG><a name="[18f]"></a>Flash_Debug</STRONG> (Thumb, 568 bytes, Stack size 13128 bytes, flash_debug.o(i.Flash_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 18432<LI>Call Chain = Flash_Debug &rArr; MxFlash_Debug &rArr; MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UserWrite
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UserRead
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Buffer_8
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABC_memcmp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
</UL>

<P><STRONG><a name="[1ee]"></a>Flash_EraseSector</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, flash.o(i.Flash_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Flash_EraseSector &rArr; Flash_BusyState
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_BusyState
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[1f0]"></a>Flash_Get_Size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(i.Flash_Get_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Flash_Get_Size &rArr; Flash_Calc_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnToReadMode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Calc_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[1f2]"></a>Flash_Init</STRONG> (Thumb, 604 bytes, Stack size 104 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Flash_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[1f6]"></a>Flash_Prog_Con_Word</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, flash.o(i.Flash_Prog_Con_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Flash_Prog_Con_Word &rArr; Flash_Write_OneWord &rArr; Flash_BusyState
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_OneWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[1f8]"></a>Flash_Read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, flash.o(i.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Flash_Read &rArr; Flash_Get_Size &rArr; Flash_Calc_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadBuffer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UserRead
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
</UL>

<P><STRONG><a name="[1f9]"></a>Flash_ReadBuffer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash.o(i.Flash_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[1e8]"></a>Flash_ReadID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash.o(i.Flash_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Calc_Size
</UL>

<P><STRONG><a name="[1f1]"></a>Flash_ReturnToReadMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.Flash_ReturnToReadMode))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
</UL>

<P><STRONG><a name="[1eb]"></a>Flash_UserRead</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, flash.o(i.Flash_UserRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash_UserRead &rArr; Flash_Read &rArr; Flash_Get_Size &rArr; Flash_Calc_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
</UL>

<P><STRONG><a name="[1ed]"></a>Flash_UserWrite</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, flash.o(i.Flash_UserWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 4276<LI>Call Chain = Flash_UserWrite &rArr; Flash_Write &rArr; Flash_Prog_Con_Word &rArr; Flash_Write_OneWord &rArr; Flash_BusyState
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
</UL>

<P><STRONG><a name="[1fa]"></a>Flash_Write</STRONG> (Thumb, 332 bytes, Stack size 4200 bytes, flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4252<LI>Call Chain = Flash_Write &rArr; Flash_Prog_Con_Word &rArr; Flash_Write_OneWord &rArr; Flash_BusyState
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Prog_Con_Word
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UserWrite
</UL>

<P><STRONG><a name="[1f7]"></a>Flash_Write_OneWord</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, flash.o(i.Flash_Write_OneWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Flash_Write_OneWord &rArr; Flash_BusyState
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_BusyState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Prog_Con_Word
</UL>

<P><STRONG><a name="[1e9]"></a>Fram_Debug</STRONG> (Thumb, 300 bytes, Stack size 144 bytes, flash_debug.o(i.Fram_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = Fram_Debug &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWrite24CExt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24CExt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CPortInitExt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PortInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM6_AuxioInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioInit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_IO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523RstInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiCsInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_PortInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_PortInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_DataOutput
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CPortInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_PortInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24g_IO_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power_Port
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_PORT_Init
</UL>

<P><STRONG><a name="[127]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
</UL>

<P><STRONG><a name="[1dd]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWaitAck
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStart
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReceiveByte
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CWaitAck
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CStart
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReceiveByte
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWrite24CExt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetMode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vRstSetL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsL
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WriteEnable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadID
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ProgramPage
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_FReadNByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_EraseSector
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaPinLow
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkPinLow
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWaitAck
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStart
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CSendByte
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReceiveByte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CNoAck
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SAMIOSelect
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PwrON
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPower
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareReset
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_out
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_GlobalReg
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[78]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWrite24CExt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetMode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vRstSetH
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsH
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WriteEnable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadID
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ProgramPage
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_PortInit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_FReadNByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_EraseSector
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaPinHigh
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkPinHigh
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWaitAck
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStart
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CSendByte
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReceiveByte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CNoAck
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Select_24g
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetRst
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SAMIOSelect
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPower
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareReset
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_enable_in_out
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_out
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_PORT_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_GlobalReg
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[188]"></a>GPS_Debug</STRONG> (Thumb, 554 bytes, Stack size 240 bytes, gps.debug.o(i.GPS_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = GPS_Debug &rArr; GPS_QueryLaLO &rArr; GPS_GetInformation &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetGPSDebug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
</UL>

<P><STRONG><a name="[200]"></a>GPS_GetInformation</STRONG> (Thumb, 1380 bytes, Stack size 432 bytes, gps.o(i.GPS_GetInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GPS_GetInformation &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
</UL>

<P><STRONG><a name="[197]"></a>GPS_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gps.o(i.GPS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPS_Init &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetTIMERHandleCallBack
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[6d]"></a>GPS_QueryInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gps.o(i.GPS_QueryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GPS_QueryInit &rArr; Uart5_GetData_DMA &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(i.GPS_Init)
</UL>
<P><STRONG><a name="[1ff]"></a>GPS_QueryLaLO</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, gps.o(i.GPS_QueryLaLO))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GPS_QueryLaLO &rArr; GPS_GetInformation &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_dddmm_dd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
</UL>

<P><STRONG><a name="[209]"></a>GPS_dddmm_dd</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, gps.o(i.GPS_dddmm_dd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GPS_dddmm_dd &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ctrl0.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = HardFault_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2fa]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogInit
</UL>

<P><STRONG><a name="[2f6]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogClear
</UL>

<P><STRONG><a name="[2f8]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogInit
</UL>

<P><STRONG><a name="[2f9]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogInit
</UL>

<P><STRONG><a name="[2f7]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_WatchDogInit
</UL>

<P><STRONG><a name="[20b]"></a>IrDA_Configuration</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, irda_port.o(i.IrDA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IrDA_Configuration &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetCOMReceiveCallBack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
</UL>

<P><STRONG><a name="[18a]"></a>IrDA_Debug</STRONG> (Thumb, 350 bytes, Stack size 280 bytes, irda_debug.o(i.IrDA_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = IrDA_Debug &rArr; IrDA_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
</UL>

<P><STRONG><a name="[19a]"></a>IrDA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, irda.o(i.IrDA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IrDA_Init &rArr; IrDA_Configuration &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[210]"></a>IrDA_ReadData</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, irda.o(i.IrDA_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = IrDA_ReadData &rArr; IrDA_Configuration &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_ClearStore
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_ClearStore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
</UL>

<P><STRONG><a name="[20f]"></a>IrDA_SendNBytes</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, irda.o(i.IrDA_SendNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200<LI>Call Chain = IrDA_SendNBytes &rArr; Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_SendByte
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_SendByte
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
</UL>

<P><STRONG><a name="[17e]"></a>KEY_Debug</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, key_debug.o(i.KEY_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = KEY_Debug &rArr; text2 &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
</UL>

<P><STRONG><a name="[217]"></a>Kernel_GetTExtFlashType</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kernel.o(i.Kernel_GetTExtFlashType))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Kernel_GetTExtFlashType &rArr; SYSTEM_I2CRead24C &rArr; SYSTEM_UserRead
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[219]"></a>Kernel_GetTExtRamType</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kernel.o(i.Kernel_GetTExtRamType))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Kernel_GetTExtRamType &rArr; SYSTEM_I2CRead24C &rArr; SYSTEM_UserRead
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[21a]"></a>LCD_Clear_y</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lcd_port.o(i.LCD_Clear_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Clear_y &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
</UL>

<P><STRONG><a name="[21d]"></a>LCD_Clrscr</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clrscr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Clrscr &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
</UL>

<P><STRONG><a name="[17b]"></a>LCD_Debug</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lcd_debug.o(i.LCD_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LCD_Debug &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
</UL>

<P><STRONG><a name="[21e]"></a>LCD_Display_Row</STRONG> (Thumb, 688 bytes, Stack size 136 bytes, lcd.o(i.LCD_Display_Row))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clrscr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1616
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_0816
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_y
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
</UL>

<P><STRONG><a name="[221]"></a>LCD_Eliminate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd.o(i.LCD_Eliminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Eliminate &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[222]"></a>LCD_GPIO_Config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd_port.o(i.LCD_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[223]"></a>LCD_HardwareReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_port.o(i.LCD_HardwareReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_HardwareReset &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[224]"></a>LCD_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Init &rArr; LCD_Eliminate &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Eliminate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareReset
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[225]"></a>LCD_SendByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd_port.o(i.LCD_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
</UL>

<P><STRONG><a name="[21b]"></a>LCD_W_Com</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd_port.o(i.LCD_W_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clrscr
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Eliminate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1616
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_0816
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_y
</UL>

<P><STRONG><a name="[21c]"></a>LCD_W_Data</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_port.o(i.LCD_W_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_W_Data &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clrscr
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Eliminate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1616
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_0816
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_y
</UL>

<P><STRONG><a name="[226]"></a>LEDSEG_ClkPinHigh</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledseg_driver.o(i.LEDSEG_ClkPinHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDSEG_ClkPinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkSet
</UL>

<P><STRONG><a name="[227]"></a>LEDSEG_ClkPinLow</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledseg_driver.o(i.LEDSEG_ClkPinLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDSEG_ClkPinLow
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkSet
</UL>

<P><STRONG><a name="[228]"></a>LEDSEG_ClkSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led_seg.o(i.LEDSEG_ClkSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDSEG_ClkSet &rArr; LEDSEG_ClkPinLow
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkPinLow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkPinHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_WriteByte
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStart
</UL>

<P><STRONG><a name="[229]"></a>LEDSEG_DataOutput</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ledseg_driver.o(i.LEDSEG_DataOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LEDSEG_DataOutput &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Init
</UL>

<P><STRONG><a name="[16f]"></a>LEDSEG_Display</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, led_seg.o(i.LEDSEG_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LEDSEG_Display &rArr; LEDSEG_ModeSelect &rArr; LEDSEG_Write &rArr; LEDSEG_WriteByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ModeSelect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[22b]"></a>LEDSEG_I2CStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led_seg.o(i.LEDSEG_I2CStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEDSEG_I2CStart &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaSet
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Write
</UL>

<P><STRONG><a name="[22d]"></a>LEDSEG_I2CStop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led_seg.o(i.LEDSEG_I2CStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEDSEG_I2CStop &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaSet
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Write
</UL>

<P><STRONG><a name="[16e]"></a>LEDSEG_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_seg.o(i.LEDSEG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LEDSEG_Init &rArr; LEDSEG_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_RowSelect
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_PortInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_DataOutput
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[170]"></a>LEDSEG_ModeSelect</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, led_seg.o(i.LEDSEG_ModeSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LEDSEG_ModeSelect &rArr; LEDSEG_Write &rArr; LEDSEG_WriteByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Display
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[22f]"></a>LEDSEG_PortInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ledseg_driver.o(i.LEDSEG_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LEDSEG_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Init
</UL>

<P><STRONG><a name="[22e]"></a>LEDSEG_RowSelect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ledseg_driver.o(i.LEDSEG_RowSelect))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Init
</UL>

<P><STRONG><a name="[230]"></a>LEDSEG_SdaPinHigh</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledseg_driver.o(i.LEDSEG_SdaPinHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDSEG_SdaPinHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaSet
</UL>

<P><STRONG><a name="[231]"></a>LEDSEG_SdaPinLow</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledseg_driver.o(i.LEDSEG_SdaPinLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDSEG_SdaPinLow
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaSet
</UL>

<P><STRONG><a name="[22c]"></a>LEDSEG_SdaSet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led_seg.o(i.LEDSEG_SdaSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDSEG_SdaSet &rArr; LEDSEG_SdaPinLow
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaPinLow
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaPinHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_WriteByte
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStart
</UL>

<P><STRONG><a name="[22a]"></a>LEDSEG_Write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led_seg.o(i.LEDSEG_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEDSEG_Write &rArr; LEDSEG_WriteByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_WriteByte
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStart
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ModeSelect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Display
</UL>

<P><STRONG><a name="[232]"></a>LEDSEG_WriteByte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, led_seg.o(i.LEDSEG_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LEDSEG_WriteByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_SdaSet
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ClkSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Write
</UL>

<P><STRONG><a name="[17d]"></a>LEDSeg_Debug</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, ledseg_debug.o(i.LEDSeg_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LEDSeg_Debug &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_ModeSelect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
</UL>

<P><STRONG><a name="[17c]"></a>LED_Debug</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, led_debug.o(i.LED_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LED_Debug &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
</UL>

<P><STRONG><a name="[171]"></a>LED_Display</STRONG> (Thumb, 838 bytes, Stack size 16 bytes, led.o(i.LED_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Process
</UL>

<P><STRONG><a name="[233]"></a>LED_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[234]"></a>LED_Process</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, ctrl0.o(i.LED_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Process &rArr; LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[23b]"></a>MXFLASH_CheckSectorLock</STRONG> (Thumb, 822 bytes, Stack size 0 bytes, mxflash.o(i.MXFLASH_CheckSectorLock))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Erase
</UL>

<P><STRONG><a name="[235]"></a>MXFLASH_Config</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, mxflash.o(i.MXFLASH_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MXFLASH_Config &rArr; MXFLASH_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadID
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_PortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[239]"></a>MXFLASH_Erase</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mxflash.o(i.MXFLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MXFLASH_Erase &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WriteEnable
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WaitReady
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_EraseSector
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_CheckSectorLock
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
</UL>

<P><STRONG><a name="[23d]"></a>MXFLASH_EraseSector</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mxflash.o(i.MXFLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXFLASH_EraseSector &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Erase
</UL>

<P><STRONG><a name="[23f]"></a>MXFLASH_FReadNByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mxflash.o(i.MXFLASH_FReadNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Read
</UL>

<P><STRONG><a name="[25b]"></a>MXFLASH_GetSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mxflash.o(i.MXFLASH_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
</UL>

<P><STRONG><a name="[240]"></a>MXFLASH_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mxflash.o(i.MXFLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MXFLASH_Init &rArr; MXFLASH_Config &rArr; MXFLASH_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Select
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_PortInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
</UL>

<P><STRONG><a name="[236]"></a>MXFLASH_PortInit</STRONG> (Thumb, 836 bytes, Stack size 16 bytes, mxflash.o(i.MXFLASH_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MXFLASH_PortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Config
</UL>

<P><STRONG><a name="[242]"></a>MXFLASH_ProgramPage</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mxflash.o(i.MXFLASH_ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXFLASH_ProgramPage &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
</UL>

<P><STRONG><a name="[243]"></a>MXFLASH_Read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mxflash.o(i.MXFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_FReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
</UL>

<P><STRONG><a name="[238]"></a>MXFLASH_ReadID</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mxflash.o(i.MXFLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXFLASH_ReadID &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Config
</UL>

<P><STRONG><a name="[237]"></a>MXFLASH_ReadStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mxflash.o(i.MXFLASH_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXFLASH_ReadStatus &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WaitReady
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Config
</UL>

<P><STRONG><a name="[23e]"></a>MXFLASH_SPISendReceiveByte</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mxflash.o(i.MXFLASH_SPISendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WriteEnable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadStatus
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadID
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ProgramPage
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_FReadNByte
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_EraseSector
</UL>

<P><STRONG><a name="[241]"></a>MXFLASH_Select</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, mxflash.o(i.MXFLASH_Select))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
</UL>

<P><STRONG><a name="[23a]"></a>MXFLASH_WaitReady</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mxflash.o(i.MXFLASH_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXFLASH_WaitReady &rArr; MXFLASH_ReadStatus &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Erase
</UL>

<P><STRONG><a name="[244]"></a>MXFLASH_Write</STRONG> (Thumb, 578 bytes, Stack size 4208 bytes, mxflash.o(i.MXFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Read
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WriteEnable
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_WaitReady
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_ProgramPage
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Erase
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
</UL>

<P><STRONG><a name="[23c]"></a>MXFLASH_WriteEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mxflash.o(i.MXFLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXFLASH_WriteEnable &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_SPISendReceiveByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Erase
</UL>

<P><STRONG><a name="[245]"></a>Mafire_u8AuthenParse</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pcsc.o(i.Mafire_u8AuthenParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mafire_u8AuthenParse &rArr; Mafire_u8Authentication &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Authentication
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueIncDecCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateValueCommand
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateBinaryCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ReadValueCommand
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ReadBinaryCommand
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GeneralAuthenticateCommand
</UL>

<P><STRONG><a name="[246]"></a>Mafire_u8Authentication</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, mifare.o(i.Mafire_u8Authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Mafire_u8Authentication &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddHexInfor
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>

<P><STRONG><a name="[24b]"></a>Mafire_u8GeneralAuthenticateCommand</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, pcsc.o(i.Mafire_u8GeneralAuthenticateCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Mafire_u8GeneralAuthenticateCommand &rArr; Mafire_u8AuthenParse &rArr; Mafire_u8Authentication &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GetAuthenBlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[24c]"></a>Mafire_u8GetAuthenBlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pcsc.o(i.Mafire_u8GetAuthenBlock))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GeneralAuthenticateCommand
</UL>

<P><STRONG><a name="[24d]"></a>Mafire_u8GetDataCommand</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, pcsc.o(i.Mafire_u8GetDataCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mafire_u8GetDataCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetTypeCNFCID
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[24f]"></a>Mafire_u8InitValueBlock</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mifare.o(i.Mafire_u8InitValueBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Mafire_u8InitValueBlock &rArr; Mafire_u8Write &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateValueCommand
</UL>

<P><STRONG><a name="[268]"></a>Mafire_u8LoadKeysCommand</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, pcsc.o(i.Mafire_u8LoadKeysCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mafire_u8LoadKeysCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[251]"></a>Mafire_u8Read</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mifare.o(i.Mafire_u8Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Mafire_u8Read &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ReadValueCommand
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ReadBinaryCommand
</UL>

<P><STRONG><a name="[252]"></a>Mafire_u8ReadBinaryCommand</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, pcsc.o(i.Mafire_u8ReadBinaryCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Mafire_u8ReadBinaryCommand &rArr; Mafire_u8AuthenParse &rArr; Mafire_u8Authentication &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[253]"></a>Mafire_u8ReadValueCommand</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pcsc.o(i.Mafire_u8ReadValueCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Mafire_u8ReadValueCommand &rArr; Mafire_u8AuthenParse &rArr; Mafire_u8Authentication &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[254]"></a>Mafire_u8UpdateBinaryCommand</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, pcsc.o(i.Mafire_u8UpdateBinaryCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Mafire_u8UpdateBinaryCommand &rArr; Mafire_u8Write &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[255]"></a>Mafire_u8UpdateValueCommand</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, pcsc.o(i.Mafire_u8UpdateValueCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Mafire_u8UpdateValueCommand &rArr; Mafire_u8InitValueBlock &rArr; Mafire_u8Write &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8InitValueBlock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8Mifare_u8CheckSecter
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[258]"></a>Mafire_u8ValueIncDecCommand</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, pcsc.o(i.Mafire_u8ValueIncDecCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8Mifare_u8CheckSecter
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8AuthenParse
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8ValueIncDecCommand
</UL>

<P><STRONG><a name="[257]"></a>Mafire_u8ValueOperation</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, mifare.o(i.Mafire_u8ValueOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u16GetRevBits
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueIncDecCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateValueCommand
</UL>

<P><STRONG><a name="[250]"></a>Mafire_u8Write</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, mifare.o(i.Mafire_u8Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mafire_u8Write &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u16GetRevBits
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8InitValueBlock
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateBinaryCommand
</UL>

<P><STRONG><a name="[298]"></a>Mafire_vResetAuthenParam</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pcsc.o(i.Mafire_vResetAuthenParam))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vResetPiccParam
</UL>

<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ctrl0.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = MemManage_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[1b8]"></a>Mifare1_Debug</STRONG> (Thumb, 2304 bytes, Stack size 120 bytes, catactlesscard_debug.o(i.Mifare1_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Mifare1_Debug &rArr; MIFARE1_ReadWallet &rArr; MIFARE1_CheckWallet &rArr; MIFARE1_ReadPicc &rArr; PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_BeepCtrl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523RstInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldOff
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Select
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Request
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadWallet
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_LoadKey
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_InitWallet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_IncWallet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DecWallet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Authent
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Anticoll
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
</UL>

<P><STRONG><a name="[1ea]"></a>MxFlash_Debug</STRONG> (Thumb, 354 bytes, Stack size 1032 bytes, flash_debug.o(i.MxFlash_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 5304<LI>Call Chain = MxFlash_Debug &rArr; MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Select
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_GetSize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
</UL>

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctrl0.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = NMI_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[25c]"></a>NTAG_u8GetVersion</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ntag21x.o(i.NTAG_u8GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NTAG_u8GetVersion &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vWriteFIFO
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ReadFIFO
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetFIFOLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8IsNtag
</UL>

<P><STRONG><a name="[260]"></a>NTAG_u8IsNtag</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ntag21x.o(i.NTAG_u8IsNtag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NTAG_u8IsNtag &rArr; NTAG_u8GetVersion &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
</UL>

<P><STRONG><a name="[13a]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DisableInterrupt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_StatePinConfig
</UL>

<P><STRONG><a name="[139]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_StatePinConfig
</UL>

<P><STRONG><a name="[307]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[58]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctrl0.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[262]"></a>PCSC_u8GeneralCommand</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pcsc.o(i.PCSC_u8GeneralCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8ValueIncDecCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[94]"></a>PCSC_u8MafireCmd</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, pcsc.o(i.PCSC_u8MafireCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = PCSC_u8MafireCmd &rArr; PCSC_u8GeneralCommand &rArr; PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeA
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdGetPiccRate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8MifareSelect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ISCPUM1Mode
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddHexInfor
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8GeneralCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateValueCommand
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateBinaryCommand
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ReadValueCommand
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ReadBinaryCommand
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8LoadKeysCommand
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GetDataCommand
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GeneralAuthenticateCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadWallet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_InitWallet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_IncWallet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DecWallet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_WritePiccEx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPiccEx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_RestoreWallet_B
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_RestoreWallet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DecWallet_B
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadWallet_B
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_WritePicc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPicc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DirectAuthent
</UL>

<P><STRONG><a name="[269]"></a>PCSC_u8TagAnalyse</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, pcsc.o(i.PCSC_u8TagAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PCSC_u8TagAnalyse
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8ValueIncDecCommand
</UL>

<P><STRONG><a name="[263]"></a>PCSC_u8ValueIncDecCommand</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, pcsc.o(i.PCSC_u8ValueIncDecCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PCSC_u8ValueIncDecCommand &rArr; Mafire_u8ValueIncDecCommand &rArr; Mafire_u8ValueOperation &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8TagAnalyse
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueIncDecCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8GeneralCommand
</UL>

<P><STRONG><a name="[26a]"></a>PICC_RC523InterfaceInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rc523.o(i.PICC_RC523InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PICC_RC523InterfaceInit &rArr; PICC_vRC523SpiInit &rArr; SYSTEM_SPIInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523RstInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiCsInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vRstSetL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vRstSetH
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsH
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdInit
</UL>

<P><STRONG><a name="[26c]"></a>PICC_TypeBMemSelect</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, iso14443.o(i.PICC_TypeBMemSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PICC_TypeBMemSelect &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBRequest
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBATQBParamParse
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
</UL>

<P><STRONG><a name="[259]"></a>PICC_u16GetRevBits</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u16GetRevBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PICC_u16GetRevBits &rArr; PICC_u8RC523ReadReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
</UL>

<P><STRONG><a name="[271]"></a>PICC_u8AbsentPolling</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u8AbsentPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeC
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccAbsentPolling
</UL>

<P><STRONG><a name="[276]"></a>PICC_u8ActiveTransferErrCheckWait</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8ActiveTransferErrCheckWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
</UL>

<P><STRONG><a name="[277]"></a>PICC_u8ChinaIDTranscive</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, iso14443.o(i.PICC_u8ChinaIDTranscive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PICC_u8ChinaIDTranscive &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeCExchange
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ReqResponse
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdChinaIDAPUDTcl
</UL>

<P><STRONG><a name="[25e]"></a>PICC_u8GetFIFOLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc523.o(i.PICC_u8GetFIFOLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PICC_u8GetFIFOLevel &rArr; PICC_u8RC523ReadReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
</UL>

<P><STRONG><a name="[92]"></a>PICC_u8GetPiccSAK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iso14443.o(i.PICC_u8GetPiccSAK), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Select2
</UL>

<P><STRONG><a name="[8d]"></a>PICC_u8GetPiccType</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, iso14443.o(i.PICC_u8GetPiccType))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Anticoll
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_WritePiccEx
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_ReadPiccEx
</UL>

<P><STRONG><a name="[8e]"></a>PICC_u8GetPiccUid</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u8GetPiccUid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PICC_u8GetPiccUid
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetTypeCNFCID
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Anticoll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Select2
</UL>

<P><STRONG><a name="[24e]"></a>PICC_u8GetTypeCNFCID</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, felica.o(i.PICC_u8GetTypeCNFCID))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetPiccUid
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8GetDataCommand
</UL>

<P><STRONG><a name="[267]"></a>PICC_u8ISCPUM1Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iso14443.o(i.PICC_u8ISCPUM1Mode))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[266]"></a>PICC_u8MifareSelect</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, iso14443.o(i.PICC_u8MifareSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PICC_u8MifareSelect &rArr; PICC_u8TypeASeleclt &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
</UL>

<P><STRONG><a name="[296]"></a>PICC_u8ParseRate</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, iso14443.o(i.PICC_u8ParseRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PICC_u8ParseRate
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBATQBParamParse
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
</UL>

<P><STRONG><a name="[1b9]"></a>PICC_u8PcdAPUDTcl</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, iso14443.o(i.PICC_u8PcdAPUDTcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PICC_u8PcdAPUDTcl &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeCExchange
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSFGTTimeDelay
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdBlockNumInvert
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdChinaIDAPUDTcl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
</UL>

<P><STRONG><a name="[28a]"></a>PICC_u8PcdBlockNumCheck</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iso14443.o(i.PICC_u8PcdBlockNumCheck))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
</UL>

<P><STRONG><a name="[27e]"></a>PICC_u8PcdChinaIDAPUDTcl</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8PcdChinaIDAPUDTcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PICC_u8PcdChinaIDAPUDTcl &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ChinaIDTranscive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
</UL>

<P><STRONG><a name="[249]"></a>PICC_u8PcdCmd</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, iso14443.o(i.PICC_u8PcdCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ActiveTransferErrCheckWait
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBSlotMarker
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBRequest
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Authentication
</UL>

<P><STRONG><a name="[264]"></a>PICC_u8PcdGetPiccRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iso14443.o(i.PICC_u8PcdGetPiccRate))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
</UL>

<P><STRONG><a name="[89]"></a>PICC_u8PcdInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u8PcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PICC_u8PcdInit &rArr; PICC_RC523InterfaceInit &rArr; PICC_vRC523SpiInit &rArr; SYSTEM_SPIInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vResetPiccParam
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Request
</UL>

<P><STRONG><a name="[283]"></a>PICC_u8PcdRBlockTransceive</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8PcdRBlockTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PICC_u8PcdRBlockTransceive &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vAPDUSetTimeOut
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
</UL>

<P><STRONG><a name="[28b]"></a>PICC_u8PcdSBlockParamParse</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, iso14443.o(i.PICC_u8PcdSBlockParamParse))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
</UL>

<P><STRONG><a name="[289]"></a>PICC_u8PcdSBlockTransceive</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8PcdSBlockTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PICC_u8PcdSBlockTransceive &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
</UL>

<P><STRONG><a name="[282]"></a>PICC_u8PcdTclErrCheckParse</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, iso14443.o(i.PICC_u8PcdTclErrCheckParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PICC_u8PcdTclErrCheckParse &rArr; PICC_u8PcdSBlockTransceive &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdSBlockTransceive
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdSBlockParamParse
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdBlockNumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
</UL>

<P><STRONG><a name="[287]"></a>PICC_u8PcdTclTransceive</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, iso14443.o(i.PICC_u8PcdTclTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PICC_u8PcdTclTransceive &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdSBlockTransceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
</UL>

<P><STRONG><a name="[281]"></a>PICC_u8Pcd_I_BlockTransceive</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, iso14443.o(i.PICC_u8Pcd_I_BlockTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PICC_u8Pcd_I_BlockTransceive &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vAPDUSetTimeOut
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
</UL>

<P><STRONG><a name="[8b]"></a>PICC_u8PiccAbsentPolling</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u8PiccAbsentPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PICC_u8PiccAbsentPolling &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Request
</UL>

<P><STRONG><a name="[95]"></a>PICC_u8PiccPresentPolling</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u8PiccPresentPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PICC_u8PiccPresentPolling &rArr; PICC_u8PresentPolling &rArr; PICC_u8ReqResponse &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_DirectAuthent
</UL>

<P><STRONG><a name="[274]"></a>PICC_u8PolligTypeB</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, iso14443.o(i.PICC_u8PolligTypeB))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeB
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vResetPiccParam
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBSlotMarker
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBRequest
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBATQBParamParse
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
</UL>

<P><STRONG><a name="[275]"></a>PICC_u8PolligTypeC</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, felica.o(i.PICC_u8PolligTypeC))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PICC_u8PolligTypeC &rArr; PICC_u8REQC &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
</UL>

<P><STRONG><a name="[273]"></a>PICC_u8PollingTypeA</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, iso14443.o(i.PICC_u8PollingTypeA))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PICC_u8PollingTypeA &rArr; PICC_u8TypeAAnticoll &rArr; PICC_u8TypeAAnticollReq &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeA
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8IsNtag
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vResetPiccParam
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSFGTTimeDelay
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
</UL>

<P><STRONG><a name="[90]"></a>PICC_u8PowerON</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PICC_u8PowerON &rArr; PICC_u8AbsentPolling &rArr; PICC_u8PolligTypeB &rArr; PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Select
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Select2
</UL>

<P><STRONG><a name="[28d]"></a>PICC_u8PresentPolling</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, iso14443.o(i.PICC_u8PresentPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PICC_u8PresentPolling &rArr; PICC_u8ReqResponse &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ReqResponse
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8IsNtag
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdBlockNumInvert
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8MifareSelect
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_TypeBMemSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccPresentPolling
</UL>

<P><STRONG><a name="[24a]"></a>PICC_u8RC523ReadReg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rc523.o(i.PICC_u8RC523ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PICC_u8RC523ReadReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiReadWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsL
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsH
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldOff
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vCRCCtrl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vAPDUSetTimeOut
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBSlotMarker
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBRequest
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccPresentPolling
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclTransceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ChinaIDTranscive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ActiveTransferErrCheckWait
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u16GetRevBits
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Authentication
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ReadFIFO
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetFIFOLevel
</UL>

<P><STRONG><a name="[290]"></a>PICC_u8REQC</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, felica.o(i.PICC_u8REQC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PICC_u8REQC &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vCRCCtrl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_u8ConfigTypeC424
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_u8ConfigTypeC212
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vWriteFIFO
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ReadFIFO
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8GetFIFOLevel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeC
</UL>

<P><STRONG><a name="[25f]"></a>PICC_u8ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc523.o(i.PICC_u8ReadFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PICC_u8ReadFIFO &rArr; PICC_u8RC523ReadReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
</UL>

<P><STRONG><a name="[292]"></a>PICC_u8ReqResponse</STRONG> (Thumb, 100 bytes, Stack size 232 bytes, felica.o(i.PICC_u8ReqResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = PICC_u8ReqResponse &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ChinaIDTranscive
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
</UL>

<P><STRONG><a name="[291]"></a>PICC_u8TypeAAnticoll</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, iso14443.o(i.PICC_u8TypeAAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PICC_u8TypeAAnticoll &rArr; PICC_u8TypeAAnticollReq &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
</UL>

<P><STRONG><a name="[294]"></a>PICC_u8TypeAAnticollReq</STRONG> (Thumb, 450 bytes, Stack size 104 bytes, iso14443.o(i.PICC_u8TypeAAnticollReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PICC_u8TypeAAnticollReq &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u16GetRevBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticoll
</UL>

<P><STRONG><a name="[27d]"></a>PICC_u8TypeAPPSReq</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, iso14443.o(i.PICC_u8TypeAPPSReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PICC_u8TypeAPPSReq &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeABitRate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
</UL>

<P><STRONG><a name="[27b]"></a>PICC_u8TypeARatsReq</STRONG> (Thumb, 350 bytes, Stack size 104 bytes, iso14443.o(i.PICC_u8TypeARatsReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PICC_u8TypeARatsReq &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ParseRate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
</UL>

<P><STRONG><a name="[279]"></a>PICC_u8TypeARequest</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, iso14443.o(i.PICC_u8TypeARequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PICC_u8TypeARequest &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u16GetRevBits
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8MifareSelect
</UL>

<P><STRONG><a name="[27a]"></a>PICC_u8TypeASeleclt</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, iso14443.o(i.PICC_u8TypeASeleclt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PICC_u8TypeASeleclt &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccDebug_vAddTrace
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u16GetRevBits
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticoll
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8MifareSelect
</UL>

<P><STRONG><a name="[26e]"></a>PICC_u8TypeBATQBParamParse</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, iso14443.o(i.PICC_u8TypeBATQBParamParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PICC_u8TypeBATQBParamParse &rArr; PICC_u8ParseRate
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ParseRate
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_TypeBMemSelect
</UL>

<P><STRONG><a name="[270]"></a>PICC_u8TypeBAttrib</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, iso14443.o(i.PICC_u8TypeBAttrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PICC_u8TypeBAttrib &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeBBitRate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_TypeBMemSelect
</UL>

<P><STRONG><a name="[26d]"></a>PICC_u8TypeBRequest</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8TypeBRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PICC_u8TypeBRequest &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_TypeBMemSelect
</UL>

<P><STRONG><a name="[28f]"></a>PICC_u8TypeBSlotMarker</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, iso14443.o(i.PICC_u8TypeBSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PICC_u8TypeBSlotMarker &rArr; PICC_u8PcdCmd &rArr; PICC_u8ActiveTransferErrCheckWait &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
</UL>

<P><STRONG><a name="[27f]"></a>PICC_u8TypeCExchange</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, felica.o(i.PICC_u8TypeCExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PICC_u8TypeCExchange &rArr; PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ChinaIDTranscive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
</UL>

<P><STRONG><a name="[288]"></a>PICC_vAPDUSetTimeOut</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, iso14443.o(i.PICC_vAPDUSetTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PICC_vAPDUSetTimeOut &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
</UL>

<P><STRONG><a name="[293]"></a>PICC_vCRCCtrl</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, iso14443.o(i.PICC_vCRCCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PICC_vCRCCtrl &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>

<P><STRONG><a name="[1b7]"></a>PICC_vFieldOff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iso14443.o(i.PICC_vFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PICC_vFieldOff &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[278]"></a>PICC_vFieldReset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, iso14443.o(i.PICC_vFieldReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PICC_vFieldReset &rArr; PICC_vPcdDelayMs &rArr; PICC_vPcdDelayN100us &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8MifareSelect
</UL>

<P><STRONG><a name="[280]"></a>PICC_vPcdBlockNumInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iso14443.o(i.PICC_vPcdBlockNumInvert))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
</UL>

<P><STRONG><a name="[28c]"></a>PICC_vPcdDelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rc523.o(i.PICC_vPcdDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PICC_vPcdDelayMs &rArr; PICC_vPcdDelayN100us &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PowerON
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSFGTTimeDelay
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccAbsentPolling
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>

<P><STRONG><a name="[26f]"></a>PICC_vPcdDelayN100us</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rc523.o(i.PICC_vPcdDelayN100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PICC_vPcdDelayN100us &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSFGTTimeDelay
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticoll
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdSBlockTransceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8MifareSelect
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_TypeBMemSelect
</UL>

<P><STRONG><a name="[26b]"></a>PICC_vPcdDelayUs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rc523.o(i.PICC_vPcdDelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RC523InterfaceInit
</UL>

<P><STRONG><a name="[285]"></a>PICC_vPcdParamInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iso14443.o(i.PICC_vPcdParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdInit
</UL>

<P><STRONG><a name="[27c]"></a>PICC_vPcdSFGTTimeDelay</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, iso14443.o(i.PICC_vPcdSFGTTimeDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PICC_vPcdSFGTTimeDelay &rArr; PICC_vPcdDelayMs &rArr; PICC_vPcdDelayN100us &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
</UL>

<P><STRONG><a name="[284]"></a>PICC_vPcdSetFWT</STRONG> (Thumb, 240 bytes, Stack size 144 bytes, iso14443.o(i.PICC_vPcdSetFWT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PICC_vPcdSetFWT &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeCExchange
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ReqResponse
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdSBlockTransceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdChinaIDAPUDTcl
</UL>

<P><STRONG><a name="[248]"></a>PICC_vPcdSetTimeout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iso14443.o(i.PICC_vPcdSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PICC_vPcdSetTimeout &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8RC523ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBSlotMarker
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBRequest
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Authentication
</UL>

<P><STRONG><a name="[8a]"></a>PICC_vRC523WriteReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rc523.o(i.PICC_vRC523WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiReadWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsL
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_vSpiCsH
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldOff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE1_Request
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeBBitRate
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeB
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeABitRate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_u8ConfigTypeA
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdDelayN100us
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetTimeout
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vPcdSetFWT
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vFieldReset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vCRCCtrl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vAPDUSetTimeOut
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBSlotMarker
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBRequest
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARatsReq
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PiccPresentPolling
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclTransceive
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdSBlockTransceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ChinaIDTranscive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ActiveTransferErrCheckWait
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_u8ConfigTypeC424
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_u8ConfigTypeC212
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Write
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueOperation
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Authentication
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vWriteFIFO
</UL>

<P><STRONG><a name="[286]"></a>PICC_vResetPiccParam</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, iso14443.o(i.PICC_vResetPiccParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PICC_vResetPiccParam
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vTypeCSetSysCode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_vResetAuthenParam
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdInit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
</UL>

<P><STRONG><a name="[299]"></a>PICC_vTypeCSetSysCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, felica.o(i.PICC_vTypeCSetSysCode))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vResetPiccParam
</UL>

<P><STRONG><a name="[25d]"></a>PICC_vWriteFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rc523.o(i.PICC_vWriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PICC_vWriteFIFO &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTAG_u8GetVersion
</UL>

<P><STRONG><a name="[29a]"></a>POWER_GetChargingState</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, power.o(i.POWER_GetChargingState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = POWER_GetChargingState &rArr; POWER_I2CReadPage &rArr; POWER_I2CReadOneByte &rArr; POWER_I2CSendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GetIntStatus
</UL>

<P><STRONG><a name="[1e2]"></a>POWER_GetIntStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, power.o(i.POWER_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = POWER_GetIntStatus &rArr; POWER_GetChargingState &rArr; POWER_I2CReadPage &rArr; POWER_I2CReadOneByte &rArr; POWER_I2CSendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GetChargingState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[29c]"></a>POWER_I2CNoAck</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, power.o(i.POWER_I2CNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_I2CNoAck &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>

<P><STRONG><a name="[29d]"></a>POWER_I2CReadOneByte</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, power.o(i.POWER_I2CReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = POWER_I2CReadOneByte &rArr; POWER_I2CSendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CWaitAck
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CStop
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CStart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CSendByte
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReceiveByte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CNoAck
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadPage
</UL>

<P><STRONG><a name="[29b]"></a>POWER_I2CReadPage</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, power.o(i.POWER_I2CReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = POWER_I2CReadPage &rArr; POWER_I2CReadOneByte &rArr; POWER_I2CSendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GetChargingState
</UL>

<P><STRONG><a name="[2a2]"></a>POWER_I2CReceiveByte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, power.o(i.POWER_I2CReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = POWER_I2CReceiveByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>

<P><STRONG><a name="[2a0]"></a>POWER_I2CSendByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, power.o(i.POWER_I2CSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = POWER_I2CSendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>

<P><STRONG><a name="[29e]"></a>POWER_I2CStart</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, power.o(i.POWER_I2CStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_I2CStart &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>

<P><STRONG><a name="[29f]"></a>POWER_I2CStop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, power.o(i.POWER_I2CStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_I2CStop &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>

<P><STRONG><a name="[2a1]"></a>POWER_I2CWaitAck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, power.o(i.POWER_I2CWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_I2CWaitAck &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReadOneByte
</UL>

<P><STRONG><a name="[2ca]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctrl0.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = PendSV_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[247]"></a>PiccDebug_vAddHexInfor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, picc_debug.o(i.PiccDebug_vAddHexInfor))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8Authentication
</UL>

<P><STRONG><a name="[272]"></a>PiccDebug_vAddTrace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, picc_debug.o(i.PiccDebug_vAddTrace))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdAPUDTcl
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeASeleclt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeARequest
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticollReq
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAAnticoll
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PresentPolling
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8Pcd_I_BlockTransceive
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclTransceive
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdTclErrCheckParse
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdRBlockTransceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PcdCmd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ChinaIDTranscive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8ActiveTransferErrCheckWait
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8AbsentPolling
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8REQC
</UL>

<P><STRONG><a name="[193]"></a>QR_Debug</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, qr_debug.o(i.QR_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = QR_Debug &rArr; QR_Scanning &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
</UL>

<P><STRONG><a name="[199]"></a>QR_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, qr_collection.o(i.QR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = QR_Init &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[2a3]"></a>QR_Scanning</STRONG> (Thumb, 228 bytes, Stack size 2016 bytes, qr_debug.o(i.QR_Scanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = QR_Scanning &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clrscr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Debug
</UL>

<P><STRONG><a name="[2a4]"></a>QR_collection</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, qr_collection.o(i.QR_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = QR_collection &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM6_AuxioSelect
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus_DMA
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart6_GetData_DMA
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
</UL>

<P><STRONG><a name="[265]"></a>RC523_u8ConfigTypeA</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rc523.o(i.RC523_u8ConfigTypeA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC523_u8ConfigTypeA &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCSC_u8MafireCmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PollingTypeA
</UL>

<P><STRONG><a name="[295]"></a>RC523_u8ConfigTypeABitRate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rc523.o(i.RC523_u8ConfigTypeABitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC523_u8ConfigTypeABitRate &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeAPPSReq
</UL>

<P><STRONG><a name="[28e]"></a>RC523_u8ConfigTypeB</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rc523.o(i.RC523_u8ConfigTypeB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC523_u8ConfigTypeB &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8PolligTypeB
</UL>

<P><STRONG><a name="[297]"></a>RC523_u8ConfigTypeBBitRate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rc523.o(i.RC523_u8ConfigTypeBBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC523_u8ConfigTypeBBitRate &rArr; PICC_vRC523WriteReg &rArr; PICC_vRC523SpiReadWrite &rArr; SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_u8TypeBAttrib
</UL>

<P><STRONG><a name="[7e]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PortInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM6_AuxioInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioInit
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_IO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523RstInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiCsInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_PortInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_PortInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CPortInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_PortInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power_Port
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_PORT_Init
</UL>

<P><STRONG><a name="[1f3]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[10f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_Init
</UL>

<P><STRONG><a name="[32f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[126]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24g_IO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_StatePinConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
</UL>

<P><STRONG><a name="[32e]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[334]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2cd]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctrl0.o(i.RCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = RCC_IRQHandler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2cc]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2cf]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2ce]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2a8]"></a>RTC_AlarmClock</STRONG> (Thumb, 614 bytes, Stack size 80 bytes, rtc.o(i.RTC_AlarmClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC_AlarmClock &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_WeekDay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetSysAlarmClock
</UL>

<P><STRONG><a name="[2a9]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_AlarmCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
</UL>

<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrl0.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; RTC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2d1]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[2ac]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
</UL>

<P><STRONG><a name="[2af]"></a>RTC_DateModify</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, rtc_debug.o(i.RTC_DateModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RTC_DateModify &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClearKeyFIFO
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
</UL>

<P><STRONG><a name="[183]"></a>RTC_Debug</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, rtc_debug.o(i.RTC_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = RTC_Debug &rArr; RTC_Display &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSysDateTime
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeModify
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateModify
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
</UL>

<P><STRONG><a name="[2b3]"></a>RTC_Display</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, rtc_debug.o(i.RTC_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RTC_Display &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetSysAlarmClock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSysDateTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
</UL>

<P><STRONG><a name="[2bc]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[2bd]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[2b5]"></a>RTC_GetCounter</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, rtc.o(i.RTC_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_GetCounter &rArr; RTC_GetSysDateTime &rArr; RTC_USER_GetTime &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSysDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_GetTime
</UL>

<P><STRONG><a name="[2ae]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[2b6]"></a>RTC_GetSysDateTime</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtc.o(i.RTC_GetSysDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_GetSysDateTime &rArr; RTC_USER_GetTime &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSysDateTime
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>

<P><STRONG><a name="[2ba]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_GetTime
</UL>

<P><STRONG><a name="[2ad]"></a>RTC_ITConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
</UL>

<P><STRONG><a name="[2bb]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2cb]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2ab]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
</UL>

<P><STRONG><a name="[2bf]"></a>RTC_SetDate</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
</UL>

<P><STRONG><a name="[2b2]"></a>RTC_SetSysDateTime</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, rtc.o(i.RTC_SetSysDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_SetSysDateTime &rArr; RTC_Set_Time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_WeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SoftDateTimeInit
</UL>

<P><STRONG><a name="[2c3]"></a>RTC_SetTime</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
</UL>

<P><STRONG><a name="[2c7]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_SetWakeUpCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
</UL>

<P><STRONG><a name="[2c1]"></a>RTC_Set_Date</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtc.o(i.RTC_Set_Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_Set_Date &rArr; RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSysDateTime
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2c2]"></a>RTC_Set_Time</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtc.o(i.RTC_Set_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_Set_Time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSysDateTime
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2c4]"></a>RTC_Set_WakeUp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rtc.o(i.RTC_Set_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Set_WakeUp &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpClockConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2c8]"></a>RTC_SoftDateTimeInit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rtc.o(i.RTC_SoftDateTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC_SoftDateTimeInit &rArr; RTC_SetSysDateTime &rArr; RTC_Set_Time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetSysDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitParaTableInfo
</UL>

<P><STRONG><a name="[2b1]"></a>RTC_TimeModify</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, rtc_debug.o(i.RTC_TimeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RTC_TimeModify &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ClearKeyFIFO
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
</UL>

<P><STRONG><a name="[2b9]"></a>RTC_USER_GetTime</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rtc.o(i.RTC_USER_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_USER_GetTime &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_WeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSysDateTime
</UL>

<P><STRONG><a name="[2c9]"></a>RTC_USER_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rtc.o(i.RTC_USER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_USER_Init &rArr; RTC_Set_Time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[18]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ctrl0.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; RTC_GetCounter &rArr; RTC_GetSysDateTime &rArr; RTC_USER_GetTime &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[2c0]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[2c6]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_WakeUpClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
</UL>

<P><STRONG><a name="[2c5]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_WakeUpCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WakeUpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2d0]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
</UL>

<P><STRONG><a name="[2d2]"></a>Read_FIFO</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, spi_usart.o(i.Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = Read_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_IRQHandler
</UL>

<P><STRONG><a name="[2d4]"></a>Read_RFCNT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi_usart.o(i.Read_RFCNT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_RFCNT &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_IRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>Read_RX_BUF</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, spi_usart.o(i.Read_RX_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_RX_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
</UL>

<P><STRONG><a name="[1bb]"></a>SAM_Menu</STRONG> (Thumb, 1552 bytes, Stack size 112 bytes, contact_debug.o(i.SAM_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = SAM_Menu &rArr; CPU_Command &rArr; cpu_process_byte_manage &rArr; CPU_CommandExecute &rArr; CPU_T1Command &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PortInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Detect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Command
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_ColdReset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_Debug
</UL>

<P><STRONG><a name="[2d7]"></a>SPIUART_Set_Baud</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, spi_usart.o(i.SPIUART_Set_Baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPIUART_Set_Baud &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
</UL>

<P><STRONG><a name="[2eb]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
</UL>

<P><STRONG><a name="[2ec]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPISendReceiveByte
</UL>

<P><STRONG><a name="[2ee]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPISendReceiveByte
</UL>

<P><STRONG><a name="[2ed]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPISendReceiveByte
</UL>

<P><STRONG><a name="[2ea]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SPIInit
</UL>

<P><STRONG><a name="[2d8]"></a>SPI_UART_IRQ_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, spi_usart_irq.o(i.SPI_UART_IRQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_UART_IRQ_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2d9]"></a>SPI_USART_HardInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_usart.o(i.SPI_USART_HardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_USART_HardInit &rArr; SPI_USART_PORT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[70]"></a>SPI_USART_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, spi_usart.o(i.SPI_USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = SPI_USART_IRQHandler &rArr; Read_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RFCNT
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_usart.o(i.SPI_USART_HardInit)
</UL>
<P><STRONG><a name="[f9]"></a>SPI_USART_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, spi_usart.o(i.SPI_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_USART_Init &rArr; Trigger_Config &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_GlobalReg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Config
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIUART_Set_Baud
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_UartInit
</UL>

<P><STRONG><a name="[2da]"></a>SPI_USART_PORT_Init</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, spi_usart_port.o(i.SPI_USART_PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI_USART_PORT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_HardInit
</UL>

<P><STRONG><a name="[102]"></a>SPI_USART_ReceiveData</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, spi_usart.o(i.SPI_USART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_USART_ReceiveData &rArr; Read_RFCNT &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RX_BUF
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RFCNT
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RecData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RecvData
</UL>

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctrl0.o(i.SVC_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = SVC_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_StatePinConfig
</UL>

<P><STRONG><a name="[2f4]"></a>SYSTEM_GetFlashSector</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system.o(i.SYSTEM_GetFlashSector))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
</UL>

<P><STRONG><a name="[2dd]"></a>SYSTEM_I2CDelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.SYSTEM_I2CDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWaitAck
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStart
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CSendByte
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReceiveByte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CNoAck
</UL>

<P><STRONG><a name="[2de]"></a>SYSTEM_I2CNoAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system.o(i.SYSTEM_I2CNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTEM_I2CNoAck &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>

<P><STRONG><a name="[2df]"></a>SYSTEM_I2CPortInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, system.o(i.SYSTEM_I2CPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYSTEM_I2CPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CPortInitExt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[1fb]"></a>SYSTEM_I2CPortInitExt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.SYSTEM_I2CPortInitExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSTEM_I2CPortInitExt &rArr; SYSTEM_I2CPortInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
</UL>

<P><STRONG><a name="[218]"></a>SYSTEM_I2CRead24C</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, system.o(i.SYSTEM_I2CRead24C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTEM_I2CRead24C &rArr; SYSTEM_UserRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_UserRead
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSYSPWRPara
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetLCDPara
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetKeyBoardPara
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFiledMask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kernel_GetTExtRamType
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kernel_GetTExtFlashType
</UL>

<P><STRONG><a name="[1fc]"></a>SYSTEM_I2CRead24CExt</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system.o(i.SYSTEM_I2CRead24CExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SYSTEM_I2CRead24CExt &rArr; SYSTEM_I2CReadOneByte &rArr; SYSTEM_I2CSendByte &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
</UL>

<P><STRONG><a name="[2e1]"></a>SYSTEM_I2CReadOneByte</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, system.o(i.SYSTEM_I2CReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYSTEM_I2CReadOneByte &rArr; SYSTEM_I2CSendByte &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWaitAck
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStart
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CSendByte
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReceiveByte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CNoAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24CExt
</UL>

<P><STRONG><a name="[2e6]"></a>SYSTEM_I2CReceiveByte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system.o(i.SYSTEM_I2CReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSTEM_I2CReceiveByte &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>

<P><STRONG><a name="[2e4]"></a>SYSTEM_I2CSendByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, system.o(i.SYSTEM_I2CSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSTEM_I2CSendByte &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWriteOneByte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>

<P><STRONG><a name="[2e2]"></a>SYSTEM_I2CStart</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, system.o(i.SYSTEM_I2CStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTEM_I2CStart &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWriteOneByte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>

<P><STRONG><a name="[2e3]"></a>SYSTEM_I2CStop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system.o(i.SYSTEM_I2CStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTEM_I2CStop &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWriteOneByte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>

<P><STRONG><a name="[2e5]"></a>SYSTEM_I2CWaitAck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system.o(i.SYSTEM_I2CWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTEM_I2CWaitAck &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWriteOneByte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CReadOneByte
</UL>

<P><STRONG><a name="[2e7]"></a>SYSTEM_I2CWrite24C</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, system.o(i.SYSTEM_I2CWrite24C))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_UserWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitParaTableInfo
</UL>

<P><STRONG><a name="[1fd]"></a>SYSTEM_I2CWrite24CExt</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, system.o(i.SYSTEM_I2CWrite24CExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SYSTEM_I2CWrite24CExt &rArr; SYSTEM_I2CWriteOneByte &rArr; SYSTEM_I2CSendByte &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
</UL>

<P><STRONG><a name="[2e9]"></a>SYSTEM_I2CWriteOneByte</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, system.o(i.SYSTEM_I2CWriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYSTEM_I2CWriteOneByte &rArr; SYSTEM_I2CSendByte &rArr; SYSTEM_I2CDelay &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWaitAck
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CStart
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWrite24CExt
</UL>

<P><STRONG><a name="[83]"></a>SYSTEM_SPIInit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, system.o(i.SYSTEM_SPIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SYSTEM_SPIInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiInit
</UL>

<P><STRONG><a name="[85]"></a>SYSTEM_SPISendReceiveByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(i.SYSTEM_SPISendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_vRC523SpiReadWrite
</UL>

<P><STRONG><a name="[2ef]"></a>SYSTEM_SectorRead</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, system.o(i.SYSTEM_SectorRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSTEM_SectorRead
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_UserWrite
</UL>

<P><STRONG><a name="[2f0]"></a>SYSTEM_SectorWrite</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, system.o(i.SYSTEM_SectorWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_GetFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_UserWrite
</UL>

<P><STRONG><a name="[2e0]"></a>SYSTEM_UserRead</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, system.o(i.SYSTEM_UserRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSTEM_UserRead
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
</UL>

<P><STRONG><a name="[2e8]"></a>SYSTEM_UserWrite</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, system.o(i.SYSTEM_UserWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorWrite
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_SectorRead
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWrite24C
</UL>

<P><STRONG><a name="[dd]"></a>SYSTEM_WatchDogClear</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.SYSTEM_WatchDogClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_WatchDogClear
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_T1Command
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdChangeIFSD
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdSendPTS
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CmdNoData
</UL>

<P><STRONG><a name="[20a]"></a>SYSTEM_WatchDogInit</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, system.o(i.SYSTEM_WatchDogInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSTEM_WatchDogInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2fb]"></a>SYSTICK_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, systick.o(i.SYSTICK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSTICK_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[176]"></a>SYS_Beep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appif.o(i.SYS_Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_Beep &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_PortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>SYS_BeepCtrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, appif.o(i.SYS_BeepCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYS_BeepCtrl &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_PortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>SYS_CLS</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, appif.o(i.SYS_CLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_CLS &rArr; LCD_Clrscr &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clrscr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransMode_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Debug
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Debug
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Debug
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[19e]"></a>SYS_CheckKeyBoard</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, appif.o(i.SYS_CheckKeyBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYS_CheckKeyBoard &rArr; SYS_KeyBoardRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardSendByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardRecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[2b0]"></a>SYS_ClearKeyFIFO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appif.o(i.SYS_ClearKeyFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeModify
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateModify
</UL>

<P><STRONG><a name="[2ff]"></a>SYS_ComSendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system.o(i.SYS_ComSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_ComSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>

<P><STRONG><a name="[173]"></a>SYS_DisplayCE</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, appif.o(i.SYS_DisplayCE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[31c]"></a>SYS_EditCPUAndLCDPreState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, appif.o(i.SYS_EditCPUAndLCDPreState))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WaitKeyEvent
</UL>

<P><STRONG><a name="[302]"></a>SYS_GetFiledMask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, appif.o(i.SYS_GetFiledMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SYS_GetFiledMask &rArr; SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitParaTableInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSYSPWRPara
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetLCDPara
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetKeyBoardPara
</UL>

<P><STRONG><a name="[304]"></a>SYS_GetKeyBoardPara</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, appif.o(i.SYS_GetKeyBoardPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SYS_GetKeyBoardPara &rArr; SYS_GetFiledMask &rArr; SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFiledMask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[305]"></a>SYS_GetLCDPara</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, appif.o(i.SYS_GetLCDPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SYS_GetLCDPara &rArr; SYS_GetFiledMask &rArr; SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFiledMask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[306]"></a>SYS_GetSYSPWRPara</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, appif.o(i.SYS_GetSYSPWRPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SYS_GetSYSPWRPara &rArr; SYS_GetFiledMask &rArr; SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFiledMask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CRead24C
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[16b]"></a>SYS_GetSysDateTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, appif.o(i.SYS_GetSysDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYS_GetSysDateTime &rArr; RTC_GetSysDateTime &rArr; RTC_USER_GetTime &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSysDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[101]"></a>SYS_GetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appif.o(i.SYS_GetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_GetData_DMA
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM3_ReceiveData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WaitKeyEvent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart6_GetData_DMA
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Cycle
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_RecvData
</UL>

<P><STRONG><a name="[196]"></a>SYS_Init</STRONG> (Thumb, 402 bytes, Stack size 1048 bytes, appif.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = SYS_Init &rArr; SYS_GetSYSPWRPara &rArr; SYS_GetFiledMask &rArr; SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSYSPWRPara
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetLCDPara
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetKeyBoardPara
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM6_AuxioInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioInit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CPortInit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_HardInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_UART_IRQ_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Config
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kernel_GetTExtRamType
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kernel_GetTExtFlashType
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetKeyPromptSound
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[303]"></a>SYS_InitParaTableInfo</STRONG> (Thumb, 410 bytes, Stack size 288 bytes, appif.o(i.SYS_InitParaTableInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SYS_InitParaTableInfo &rArr; SYSTEM_I2CWrite24C &rArr; SYSTEM_UserWrite &rArr; SYSTEM_SectorWrite &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitTamperReg
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CWrite24C
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SoftDateTimeInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetFiledMask
</UL>

<P><STRONG><a name="[19d]"></a>SYS_InitSysKeyborad</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, appif.o(i.SYS_InitSysKeyborad))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYS_InitSysKeyborad &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[2fe]"></a>SYS_KeyBoardRecvByte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appif.o(i.SYS_KeyBoardRecvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_KeyBoardRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CheckKeyBoard
</UL>

<P><STRONG><a name="[2fd]"></a>SYS_KeyBoardSendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, appif.o(i.SYS_KeyBoardSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_KeyBoardSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CheckKeyBoard
</UL>

<P><STRONG><a name="[19c]"></a>SYS_KeyInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, appif.o(i.SYS_KeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYS_KeyInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[30c]"></a>SYS_OpenPort</STRONG> (Thumb, 1558 bytes, Stack size 48 bytes, appif.o(i.SYS_OpenPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
</UL>

<P><STRONG><a name="[1a7]"></a>SYS_OpenPortExt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, appif.o(i.SYS_OpenPortExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitSysKeyborad
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Select_24g
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[30f]"></a>SYS_PortReceive</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, appif.o(i.SYS_PortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_PortReceive &rArr; USART4_DMA_ReceiveDatas &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DMA_ReceiveDatas
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
</UL>

<P><STRONG><a name="[1a9]"></a>SYS_PortSend</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, appif.o(i.SYS_PortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_PortSend
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_SendCommand
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Production_Evaluation
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_SendByte
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_SendByte
</UL>

<P><STRONG><a name="[172]"></a>SYS_ReadKey</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, appif.o(i.SYS_ReadKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_ReadKey &rArr; SYS_KeyBoardRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardSendByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardRecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeModify
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateModify
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Debug
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransMode_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Debug
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Debug
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyExt
</UL>

<P><STRONG><a name="[311]"></a>SYS_ReadKeyExt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, appif.o(i.SYS_ReadKeyExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYS_ReadKeyExt &rArr; SYS_ReadKey &rArr; SYS_KeyBoardRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WaitKeyEvent
</UL>

<P><STRONG><a name="[214]"></a>SYS_ReadKeyInq</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, appif.o(i.SYS_ReadKeyInq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SYS_ReadKeyInq &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[369]"></a>SYS_Reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, appif.o(i.SYS_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>SYS_SetCOMReceiveCallBack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, appif.o(i.SYS_SetCOMReceiveCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_SetCOMReceiveCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_SetCOM5CALLBACKFUNC
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_SetCOM4CALLBACKFUNC
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM3_SetCOM3CALLBACKFUNC
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SetCOM1CALLBACKFUNC
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>

<P><STRONG><a name="[308]"></a>SYS_SetKeyPromptSound</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appif.o(i.SYS_SetKeyPromptSound))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2b4]"></a>SYS_SetSysAlarmClock</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, appif.o(i.SYS_SetSysAlarmClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SYS_SetSysAlarmClock &rArr; RTC_AlarmClock &rArr; Calc_WeekDay
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>

<P><STRONG><a name="[207]"></a>SYS_SetTIMERHandleCallBack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, appif.o(i.SYS_SetTIMERHandleCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_SetTIMERHandleCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_SetTIM4CALLBACKFUNC
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_SetTIM3CALLBACKFUNC
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
</UL>

<P><STRONG><a name="[318]"></a>SYS_SetTickBack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, appif.o(i.SYS_SetTickBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_SetTickBack
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_SetCALLBACKFUNC
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
</UL>

<P><STRONG><a name="[1b6]"></a>SYS_USBDisconnection</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, appif.o(i.SYS_USBDisconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYS_USBDisconnection &rArr; USB_Disconnect &rArr; USB_OTG_BSP_DisableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
</UL>

<P><STRONG><a name="[31b]"></a>SYS_WaitKeyEvent</STRONG> (Thumb, 274 bytes, Stack size 168 bytes, appif.o(i.SYS_WaitKeyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SYS_WaitKeyEvent &rArr; SYS_ReadKeyExt &rArr; SYS_ReadKey &rArr; SYS_KeyBoardRecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EditCPUAndLCDPreState
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyExt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>SYS_WakeupCPU</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, appif.o(i.SYS_WakeupCPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYS_WakeupCPU &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>SendToPC</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(i.SendToPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisplayCE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_SendNBytes
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeModify
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateModify
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text1
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Debug
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransMode_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Debug
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Debug
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contact_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Menu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Menu
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Menu
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Menu
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Menu
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_FirstMenu
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
</UL>

<P><STRONG><a name="[31e]"></a>Send_Buff_Init</STRONG> (Thumb, 3790 bytes, Stack size 72 bytes, tcp.o(i.Send_Buff_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Send_Buff_Init &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reconnection
</UL>

<P><STRONG><a name="[31d]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WakeupCPU
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[21f]"></a>Show_0816</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, lcd_port.o(i.Show_0816))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Show_0816 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
</UL>

<P><STRONG><a name="[220]"></a>Show_1616</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, lcd_port.o(i.Show_1616))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Row
</UL>

<P><STRONG><a name="[182]"></a>Sound_Debug</STRONG> (Thumb, 956 bytes, Stack size 16 bytes, sound_debug.o(i.Sound_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 3200<LI>Call Chain = Sound_Debug &rArr; TTSPlay &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_SetTTSDebug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctrl0.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; LED_Process &rArr; LED_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>Sys_Delay_MS</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, miscfunc.o(i.Sys_Delay_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Write
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAM_Menu
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SetMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Beep
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Debug
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Debug
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Debug
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSeg_Debug
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Debug
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_BeepCtrl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart6_GetData_DMA
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXFLASH_Erase
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DMA_ReceiveDatas
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_USER_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_ReceiveData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Reset
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[321]"></a>Sys_Delay_NS</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, miscfunc.o(i.Sys_Delay_NS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_NS
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_US
</UL>

<P><STRONG><a name="[213]"></a>Sys_Delay_US</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, miscfunc.o(i.Sys_Delay_US))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_NS
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_WriteByte
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSEG_I2CStart
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_I2CDelay
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_W_Com
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HardwareReset
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CWaitAck
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CStop
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CStart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CSendByte
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CReceiveByte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2CNoAck
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(.text)
</UL>
<P><STRONG><a name="[322]"></a>TAMPER_BackupWriteByte</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tamper.o(i.TAMPER_BackupWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TAMPER_BackupWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_BackupWriteNBytes
</UL>

<P><STRONG><a name="[30a]"></a>TAMPER_BackupWriteNBytes</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, tamper.o(i.TAMPER_BackupWriteNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TAMPER_BackupWriteNBytes &rArr; TAMPER_BackupWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_BackupWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitTamperReg
</UL>

<P><STRONG><a name="[169]"></a>TCP_Connection_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.TCP_Connection_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[163]"></a>TCP_Connection_Time_MAX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.TCP_Connection_Time_MAX))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[71]"></a>TCP_Connections</STRONG> (Thumb, 4084 bytes, Stack size 488 bytes, tcp.o(i.TCP_Connections))
<BR><BR>[Stack]<UL><LI>Max Depth = 2736<LI>Call Chain = TCP_Connections &rArr; TCP_Data_SR &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetCurrData_DMA
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.TCP_Init)
</UL>
<P><STRONG><a name="[323]"></a>TCP_Data_SR</STRONG> (Thumb, 1964 bytes, Stack size 96 bytes, tcp.o(i.TCP_Data_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = TCP_Data_SR &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetCurrData_DMA
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reconnection
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
</UL>

<P><STRONG><a name="[187]"></a>TCP_Debug</STRONG> (Thumb, 2346 bytes, Stack size 1432 bytes, tcp_debug.o(i.TCP_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8840<LI>Call Chain = TCP_Debug &rArr; TCP_RecvNETData &rArr; TCP_RecvData1 &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SetCallBackFlag
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetTCPDebug
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendNETData
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvNETData
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reconnection
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QuerySignal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QueryIPAdd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_QueryConnectionSchedule
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Production_Evaluation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_NetworkPara_Set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connection_Time_MAX
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortReceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
</UL>

<P><STRONG><a name="[329]"></a>TCP_IO_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp_port.o(i.TCP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TCP_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_PwrON
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reconnection
</UL>

<P><STRONG><a name="[16a]"></a>TCP_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp.o(i.TCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TCP_Init &rArr; COM_SelectTCP &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_IO_Init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetTickBack
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[168]"></a>TCP_Interactive_Mode_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.TCP_Interactive_Mode_Set))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[164]"></a>TCP_NetworkPara_Set</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tcp.o(i.TCP_NetworkPara_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TCP_NetworkPara_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[326]"></a>TCP_Production_Evaluation</STRONG> (Thumb, 100 bytes, Stack size 112 bytes, tcp.o(i.TCP_Production_Evaluation))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = TCP_Production_Evaluation &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
</UL>

<P><STRONG><a name="[32a]"></a>TCP_PwrON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_port.o(i.TCP_PwrON))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_IO_Init
</UL>

<P><STRONG><a name="[162]"></a>TCP_QueryConnectionSchedule</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.TCP_QueryConnectionSchedule))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[175]"></a>TCP_QueryIPAdd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(i.TCP_QueryIPAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TCP_QueryIPAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[174]"></a>TCP_QuerySignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.TCP_QuerySignal))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[325]"></a>TCP_Reconnection</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(i.TCP_Reconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TCP_Reconnection &rArr; COM_SelectTCP &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_IO_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
</UL>

<P><STRONG><a name="[32c]"></a>TCP_RecvData1</STRONG> (Thumb, 792 bytes, Stack size 5232 bytes, tcp.o(i.TCP_RecvData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 7384<LI>Call Chain = TCP_RecvData1 &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvNETData
</UL>

<P><STRONG><a name="[328]"></a>TCP_RecvNETData</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tcp.o(i.TCP_RecvNETData))
<BR><BR>[Stack]<UL><LI>Max Depth = 7408<LI>Call Chain = TCP_RecvNETData &rArr; TCP_RecvData1 &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
</UL>

<P><STRONG><a name="[32d]"></a>TCP_SendData1</STRONG> (Thumb, 300 bytes, Stack size 3128 bytes, tcp.o(i.TCP_SendData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 5280<LI>Call Chain = TCP_SendData1 &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendNETData
</UL>

<P><STRONG><a name="[327]"></a>TCP_SendNETData</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp.o(i.TCP_SendNETData))
<BR><BR>[Stack]<UL><LI>Max Depth = 5304<LI>Call Chain = TCP_SendNETData &rArr; TCP_SendData1 &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
</UL>

<P><STRONG><a name="[165]"></a>TCP_SetCallBackFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.TCP_SetCallBackFlag))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[319]"></a>TICK_SetCALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.TICK_SetCALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetTickBack
</UL>

<P><STRONG><a name="[2e]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrl0.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl0.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[316]"></a>TIM3_SetTIM3CALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.TIM3_SetTIM3CALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetTIMERHandleCallBack
</UL>

<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl0.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[317]"></a>TIM4_SetTIM4CALLBACKFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctrl0.o(i.TIM4_SetTIM4CALLBACKFUNC))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetTIMERHandleCallBack
</UL>

<P><STRONG><a name="[41]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, ctrl0.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; BEEP_Cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Cycle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[117]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayCheck
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayCheck
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[111]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsEnable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayCheck
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsEnable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsDisable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayCheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ReceiveByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsDisable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[110]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_Init
</UL>

<P><STRONG><a name="[116]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayCheck
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayCheck
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[114]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[115]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[112]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUsInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUsInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayUs
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_WorkTimerInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME3_DelayUs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME2_DelayMs
</UL>

<P><STRONG><a name="[198]"></a>TTSInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, tts.o(i.TTSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TTSInit &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTS_IO_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPower
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[320]"></a>TTSPlay</STRONG> (Thumb, 488 bytes, Stack size 1032 bytes, tts.o(i.TTSPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184<LI>Call Chain = TTSPlay &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_GetData_DMA
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPower
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
</UL>

<P><STRONG><a name="[1de]"></a>TTSPower</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tts.o(i.TTSPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TTSPower
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[31f]"></a>TTSSet</STRONG> (Thumb, 166 bytes, Stack size 128 bytes, tts.o(i.TTSSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TTSSet &rArr; Uart4_GetData_DMA &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM5_AuxioSelect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM4_AuxioSelect
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
</UL>

<P><STRONG><a name="[330]"></a>TTS_IO_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tts_port.o(i.TTS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TTS_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
</UL>

<P><STRONG><a name="[19b]"></a>TTS_SetTTSDebug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tts.o(i.TTS_SetTTSDebug))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[184]"></a>TransMode_Debug</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, transmode_debug.o(i.TransMode_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = TransMode_Debug &rArr; COM_Debug &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Debug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
</UL>

<P><STRONG><a name="[2dc]"></a>Trigger_Config</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, spi_usart.o(i.Trigger_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Trigger_Config &rArr; Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
</UL>

<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl0.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ctrl0.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ctrl0.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl0.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[310]"></a>USART4_DMA_ReceiveDatas</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uart_dma.o(i.USART4_DMA_ReceiveDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART4_DMA_ReceiveDatas &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus_DMA
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortReceive
</UL>

<P><STRONG><a name="[332]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_ClkInit
</UL>

<P><STRONG><a name="[30e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>

<P><STRONG><a name="[1db]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>

<P><STRONG><a name="[1b3]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SelectTCP
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_ReadData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryLaLO
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>

<P><STRONG><a name="[301]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ComSendByte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortReceive
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardSendByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardRecvByte
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[331]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
</UL>

<P><STRONG><a name="[30d]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPort
</UL>

<P><STRONG><a name="[20e]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_IrDACmd))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>

<P><STRONG><a name="[20d]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_IrDAConfig))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>

<P><STRONG><a name="[30b]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortReceive
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardRecvByte
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[2d3]"></a>USART_SPISendReceiveByte</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, spi_usart_port.o(i.USART_SPISendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_SlaveReg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_GlobalReg
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[300]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ComSendByte
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_KeyBoardSendByte
</UL>

<P><STRONG><a name="[12b]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Configuration
</UL>

<P><STRONG><a name="[12c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SmartCardCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
</UL>

<P><STRONG><a name="[34d]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[338]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[339]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[337]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>

<P><STRONG><a name="[33a]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[33b]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
</UL>

<P><STRONG><a name="[336]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>

<P><STRONG><a name="[261]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_SessionRequest_ISR
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_OTG_ISR
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[34f]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[34c]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[350]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[352]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[351]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[353]"></a>USB_Cable_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_Cable_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect
</UL>

<P><STRONG><a name="[31a]"></a>USB_Disconnect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_Disconnect &rArr; USB_OTG_BSP_DisableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DisableInterrupt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_USBDisconnection
</UL>

<P><STRONG><a name="[354]"></a>USB_OTG_BSP_DisableInterrupt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_DisableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_DisableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect
</UL>

<P><STRONG><a name="[1bd]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
</UL>

<P><STRONG><a name="[355]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[1c9]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[1c3]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[1ce]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1c1]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[1bf]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[1c6]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[1c4]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[1d6]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
</UL>

<P><STRONG><a name="[1ca]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[356]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[340]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[341]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1cc]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1d1]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[1d2]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[1d4]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[1d7]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[1ba]"></a>Uart1_DumpData</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, system.o(i.Uart1_DumpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_SendCommand
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_ReadResponse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[1ab]"></a>Uart3_GetData_DMA</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, uart_dma.o(i.Uart3_GetData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart3_GetData_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM3_ReceiveData
</UL>

<P><STRONG><a name="[324]"></a>Uart4_GetCurrData_DMA</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, uart_dma.o(i.Uart4_GetCurrData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart4_GetCurrData_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
</UL>

<P><STRONG><a name="[32b]"></a>Uart4_GetData_DMA</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, uart_dma.o(i.Uart4_GetData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart4_GetData_DMA &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_ReadResponse
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Production_Evaluation
</UL>

<P><STRONG><a name="[201]"></a>Uart5_GetData_DMA</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, uart_dma.o(i.Uart5_GetData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Uart5_GetData_DMA &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[2a7]"></a>Uart6_GetData_DMA</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, uart_dma.o(i.Uart6_GetData_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Uart6_GetData_DMA &rArr; Sys_Delay_MS &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
</UL>

<P><STRONG><a name="[2a6]"></a>Uart_GetStatus_DMA</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uart_dma.o(i.Uart_GetStatus_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_GetStatus_DMA
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_collection
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DMA_ReceiveDatas
</UL>

<P><STRONG><a name="[1a8]"></a>Uart_Printf</STRONG> (Thumb, 138 bytes, Stack size 2080 bytes, system.o(i.Uart_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ComSendByte
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connections
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvNETData
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Production_Evaluation
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>Uart_SetGPSDebug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(i.Uart_SetGPSDebug))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
</UL>

<P><STRONG><a name="[167]"></a>Uart_SetSysDebug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.Uart_SetSysDebug))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Debug
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
</UL>

<P><STRONG><a name="[166]"></a>Uart_SetTCPDebug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.Uart_SetTCPDebug))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
</UL>

<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ctrl0.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = UsageFault_Handler &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_OpenPortExt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xxappinit.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>Version_Debug</STRONG> (Thumb, 194 bytes, Stack size 160 bytes, version_debug.o(i.Version_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Version_Debug &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
</UL>

<P><STRONG><a name="[ff]"></a>Write_FIFO</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, spi_usart.o(i.Write_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = Write_FIFO &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SendData
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_SendNBytes
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_SendNBytes
</UL>

<P><STRONG><a name="[2db]"></a>Write_Read_GlobalReg</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_usart.o(i.Write_Read_GlobalReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Write_Read_GlobalReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
</UL>

<P><STRONG><a name="[2d5]"></a>Write_Read_SlaveReg</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spi_usart.o(i.Write_Read_SlaveReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_Read_SlaveReg &rArr; USART_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Config
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIUART_Set_Baud
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RFCNT
</UL>

<P><STRONG><a name="[358]"></a>_24G_ReadResponse</STRONG> (Thumb, 356 bytes, Stack size 1080 bytes, _24g_.o(i._24G_ReadResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 3232<LI>Call Chain = _24G_ReadResponse &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4_GetData_DMA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
</UL>

<P><STRONG><a name="[359]"></a>_24G_SendCommand</STRONG> (Thumb, 234 bytes, Stack size 544 bytes, _24g_.o(i._24G_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 2696<LI>Call Chain = _24G_SendCommand &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_PortSend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_DumpData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
</UL>

<P><STRONG><a name="[35c]"></a>_24G_Set_Debug</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, _24g_.o(i._24G_Set_Debug))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
</UL>

<P><STRONG><a name="[35a]"></a>_24g_IO_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, _24g_port.o(i._24g_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _24g_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24g_Init
</UL>

<P><STRONG><a name="[35b]"></a>_24g_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _24g_.o(i._24g_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _24g_Init &rArr; COM_Select_24g &rArr; SYS_OpenPortExt &rArr; SYS_OpenPort &rArr; DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24g_IO_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Select_24g
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_2_4G_Debug
</UL>

<P><STRONG><a name="[190]"></a>_2_4G_Debug</STRONG> (Thumb, 534 bytes, Stack size 128 bytes, 2_4g_debug.o(i._2_4G_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360<LI>Call Chain = _2_4G_Debug &rArr; _24G_ReadResponse &rArr; Uart1_DumpData &rArr; Uart_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTickCount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24g_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_Set_Debug
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_SendCommand
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24G_ReadResponse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
</UL>

<P><STRONG><a name="[35d]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[122]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MxFlash_Debug
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABC_memcmp
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrDA_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Scanning
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_QueryInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_FIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_WorkingTimer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_USART_IRQHandler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
</UL>

<P><STRONG><a name="[38c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[38d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[35f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38e]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[16c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSSet
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTSPlay
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Debug
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Debug
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Debug
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CatactlessCPU_Debug
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Debug
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_SendData1
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_RecvData1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Data_SR
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Buff_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[38f]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[390]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[360]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[391]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[392]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[393]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[357]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[394]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[204]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Debug
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mifare1_Debug
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInformation
</UL>

<P><STRONG><a name="[361]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[395]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[396]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[397]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[362]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[15e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[72]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SYS_ComSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ComSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[67]"></a>main</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 18440<LI>Call Chain = main &rArr; App2_Page4Func &rArr; Flash_Debug &rArr; MxFlash_Debug &rArr; MXFLASH_Write &rArr; MXFLASH_Read &rArr; MXFLASH_FReadNByte &rArr; MXFLASH_SPISendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetSysDebug
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_WaitKeyEvent
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Reset
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKeyInq
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CLS
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_Debug
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_laohua
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App3_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page4Func
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page3Func
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page2Func
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page1Func
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_Page0Func
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2_FirstMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[215]"></a>text1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key_debug.o(i.text1))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = text1 &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
</UL>

<P><STRONG><a name="[216]"></a>text2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key_debug.o(i.text2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = text2 &rArr; SendToPC &rArr; SYS_DisplayCE &rArr; LCD_Display_Row &rArr; Show_1616 &rArr; LCD_W_Com &rArr; LCD_SendByte &rArr; Sys_Delay_US &rArr; Sys_Delay_NS
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_MS
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToPC
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Debug
</UL>

<P><STRONG><a name="[368]"></a>text_laohua</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.text_laohua))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256]"></a>u8Mifare_u8CheckSecter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pcsc.o(i.u8Mifare_u8CheckSecter))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8ValueIncDecCommand
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mafire_u8UpdateValueCommand
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[309]"></a>SYS_InitTamperReg</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, appif.o(i.SYS_InitTamperReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYS_InitTamperReg &rArr; TAMPER_BackupWriteNBytes &rArr; TAMPER_BackupWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_BackupWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitParaTableInfo
</UL>

<P><STRONG><a name="[1e7]"></a>Flash_Calc_Size</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, flash.o(i.Flash_Calc_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_Calc_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_Size
</UL>

<P><STRONG><a name="[e8]"></a>cpu_SetCard</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cpu_SetCard &rArr; ConfigGpio7816Para
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGpio7816Para
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetCardMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
</UL>

<P><STRONG><a name="[eb]"></a>cpu_process_byte_manage</STRONG> (Thumb, 506 bytes, Stack size 360 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = cpu_process_byte_manage &rArr; CPU_CommandExecute &rArr; CPU_T1Command &rArr; CPU_CmdT1ReceiveBlock &rArr; CPU_ReceiveByte &rArr; SC7816_ReceiveByteHRate &rArr; SC7816_ReceiveByte &rArr; ICCGPIO_InData &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_PowerDown
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CommandExecute
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Command
</UL>

<P><STRONG><a name="[2fc]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
</UL>

<P><STRONG><a name="[2b8]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[2be]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[120]"></a>GetEtuClk</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGpio7816Para
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitGpio7816Para
</UL>

<P><STRONG><a name="[11f]"></a>DeInitGpio7816Para</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeInitGpio7816Para
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEtuClk
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_WorkingTimer
</UL>

<P><STRONG><a name="[123]"></a>wait_one_etu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_TestTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_InData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_WorkingTimer
</UL>

<P><STRONG><a name="[124]"></a>sam_io_out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sam_io_out
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_InData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_GpioInit
</UL>

<P><STRONG><a name="[12a]"></a>sam_io_enable_in_out</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC7816_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_InData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_setRx
</UL>

<P><STRONG><a name="[130]"></a>sam_io_in</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_InData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
</UL>

<P><STRONG><a name="[131]"></a>wait_half_etu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio7816.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_InData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICCGPIO_OutData
</UL>

<P><STRONG><a name="[12e]"></a>iso7816_setRx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio7816.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iso7816_setRx &rArr; sam_io_enable_in_out
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_io_enable_in_out
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_T0_LastByte
</UL>

<P><STRONG><a name="[1c8]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1cb]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d0]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[342]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[344]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[343]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d5]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[345]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[346]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[348]"></a>DCD_OTG_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_OTG_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_OTG_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1cd]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[347]"></a>DCD_SessionRequest_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_SessionRequest_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_SessionRequest_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1cf]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_DevConnected</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_DevDisconnected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DevDisconnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[33c]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[3]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[335]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[33d]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[33e]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[33f]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[349]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[34b]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[34e]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[363]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35e]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[366]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[365]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[154]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[15b]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
